{"id":"bfa3eb1d2727a5aa5a852f54bda1044b","_format":"hh-sol-build-info-1","solcVersion":"0.8.20","solcLongVersion":"0.8.20+commit.a1b79de6","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/Hashes.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/cryptography/Hashes.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library of standard hash functions.\n *\n * _Available since v5.1._\n */\nlibrary Hashes {\n    /**\n     * @dev Commutative Keccak256 hash of a sorted pair of bytes32. Frequently used when working with merkle proofs.\n     *\n     * NOTE: Equivalent to the `standardNodeHash` in our https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n     */\n    function commutativeKeccak256(bytes32 a, bytes32 b) internal pure returns (bytes32) {\n        return a < b ? efficientKeccak256(a, b) : efficientKeccak256(b, a);\n    }\n\n    /**\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\n     */\n    function efficientKeccak256(bytes32 a, bytes32 b) internal pure returns (bytes32 value) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/MerkleProof.sol)\n// This file was procedurally generated from scripts/generate/templates/MerkleProof.js.\n\npragma solidity ^0.8.20;\n\nimport {Hashes} from \"./Hashes.sol\";\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the Merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates Merkle trees that are safe\n * against this attack out of the box.\n *\n * IMPORTANT: Consider memory side-effects when using custom hashing functions\n * that access memory in an unsafe way.\n *\n * NOTE: This library supports proof verification for merkle trees built using\n * custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving\n * leaf inclusion in trees built using non-commutative hashing functions requires\n * additional logic that is not supported by this library.\n */\nlibrary MerkleProof {\n    /**\n     *@dev The multiproof provided is not valid.\n     */\n    error MerkleProofInvalidMultiproof();\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with the default hashing function.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with the default hashing function.\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = Hashes.commutativeKeccak256(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with a custom hashing function.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processProof(proof, leaf, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with a custom hashing function.\n     */\n    function processProof(\n        bytes32[] memory proof,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = hasher(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with the default hashing function.\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with the default hashing function.\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = Hashes.commutativeKeccak256(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with a custom hashing function.\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processProofCalldata(proof, leaf, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with a custom hashing function.\n     */\n    function processProofCalldata(\n        bytes32[] calldata proof,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = hasher(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in memory with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProof}.\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in memory with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = Hashes.commutativeKeccak256(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in memory with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProof}.\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in memory with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = hasher(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in calldata with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProofCalldata}.\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in calldata with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = Hashes.commutativeKeccak256(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in calldata with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProofCalldata}.\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in calldata with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = hasher(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"},"contracts/MemeRewards.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\n\n/**\n * @title MemeRewards\n * @dev Manages ETH rewards for meme creators with batch claiming via Merkle proofs\n */\ncontract MemeRewards is ReentrancyGuard, Ownable {\n    // Reward amount per like (in wei)\n    uint256 public rewardPerLike = 0.001 ether;\n    \n    // Merkle root for batch claims\n    bytes32 public merkleRoot;\n    \n    // Track claimed rewards to prevent double-claiming\n    mapping(address => uint256) public claimedRewards;\n    \n    // Track pending rewards (off-chain aggregation)\n    mapping(address => uint256) public pendingRewards;\n    \n    // Events\n    event LikeRewardDeposited(address indexed creator, uint256 amount, uint256 memeId);\n    event RewardsClaimed(address indexed creator, uint256 amount);\n    event MerkleRootUpdated(bytes32 newRoot);\n    event RewardPerLikeUpdated(uint256 newAmount);\n    \n    constructor() Ownable(msg.sender) {}\n    \n    /**\n     * @dev Deposit reward for a like\n     * @param creator Address of the meme creator\n     * @param memeId ID of the meme being liked\n     */\n    function depositLikeReward(address creator, uint256 memeId) external payable {\n        require(msg.value >= rewardPerLike, \"Insufficient reward amount\");\n        require(creator != address(0), \"Invalid creator address\");\n        \n        pendingRewards[creator] += msg.value;\n        \n        emit LikeRewardDeposited(creator, msg.value, memeId);\n    }\n    \n    /**\n     * @dev Claim rewards using Merkle proof (batch claiming)\n     * @param totalAmount Total amount claimable by the user\n     * @param merkleProof Merkle proof for verification\n     */\n    function claimRewards(\n        uint256 totalAmount,\n        bytes32[] calldata merkleProof\n    ) external nonReentrant {\n        require(totalAmount > 0, \"No rewards to claim\");\n        \n        // Calculate amount to claim (total - already claimed)\n        uint256 alreadyClaimed = claimedRewards[msg.sender];\n        require(totalAmount > alreadyClaimed, \"Already claimed all rewards\");\n        uint256 amountToClaim = totalAmount - alreadyClaimed;\n        \n        // Verify Merkle proof\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender, totalAmount));\n        require(\n            MerkleProof.verify(merkleProof, merkleRoot, leaf),\n            \"Invalid Merkle proof\"\n        );\n        \n        // Update claimed amount\n        claimedRewards[msg.sender] = totalAmount;\n        \n        // Transfer rewards\n        (bool success, ) = msg.sender.call{value: amountToClaim}(\"\");\n        require(success, \"Transfer failed\");\n        \n        emit RewardsClaimed(msg.sender, amountToClaim);\n    }\n    \n    /**\n     * @dev Simple claim without Merkle proof (uses pendingRewards mapping)\n     */\n    function claimPendingRewards() external nonReentrant {\n        uint256 amount = pendingRewards[msg.sender];\n        require(amount > 0, \"No pending rewards\");\n        \n        pendingRewards[msg.sender] = 0;\n        \n        (bool success, ) = msg.sender.call{value: amount}(\"\");\n        require(success, \"Transfer failed\");\n        \n        emit RewardsClaimed(msg.sender, amount);\n    }\n    \n    /**\n     * @dev Update Merkle root (admin only)\n     * @param newRoot New Merkle root\n     */\n    function updateMerkleRoot(bytes32 newRoot) external onlyOwner {\n        merkleRoot = newRoot;\n        emit MerkleRootUpdated(newRoot);\n    }\n    \n    /**\n     * @dev Update reward per like (admin only)\n     * @param newAmount New reward amount in wei\n     */\n    function updateRewardPerLike(uint256 newAmount) external onlyOwner {\n        rewardPerLike = newAmount;\n        emit RewardPerLikeUpdated(newAmount);\n    }\n    \n    /**\n     * @dev Get pending rewards for an address\n     */\n    function getPendingRewards(address user) external view returns (uint256) {\n        return pendingRewards[user];\n    }\n    \n    /**\n     * @dev Get claimed rewards for an address\n     */\n    function getClaimedRewards(address user) external view returns (uint256) {\n        return claimedRewards[user];\n    }\n    \n    /**\n     * @dev Emergency withdraw (owner only)\n     */\n    function emergencyWithdraw() external onlyOwner {\n        uint256 balance = address(this).balance;\n        (bool success, ) = owner().call{value: balance}(\"\");\n        require(success, \"Withdrawal failed\");\n    }\n    \n    // Receive function to accept ETH\n    receive() external payable {}\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"],"":["ast"]}}}},"output":{"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[177],"Ownable":[147]},"id":148,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"102:24:0"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":148,"sourceUnit":178,"src":"128:45:0","symbolAliases":[{"foreign":{"id":2,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":177,"src":"136:7:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":5,"name":"Context","nameLocations":["692:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":177,"src":"692:7:0"},"id":6,"nodeType":"InheritanceSpecifier","src":"692:7:0"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":4,"nodeType":"StructuredDocumentation","src":"175:487:0","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":147,"linearizedBaseContracts":[147,177],"name":"Ownable","nameLocation":"681:7:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":8,"mutability":"mutable","name":"_owner","nameLocation":"722:6:0","nodeType":"VariableDeclaration","scope":147,"src":"706:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7,"name":"address","nodeType":"ElementaryTypeName","src":"706:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"documentation":{"id":9,"nodeType":"StructuredDocumentation","src":"735:85:0","text":" @dev The caller account is not authorized to perform an operation."},"errorSelector":"118cdaa7","id":13,"name":"OwnableUnauthorizedAccount","nameLocation":"831:26:0","nodeType":"ErrorDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[{"constant":false,"id":11,"mutability":"mutable","name":"account","nameLocation":"866:7:0","nodeType":"VariableDeclaration","scope":13,"src":"858:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10,"name":"address","nodeType":"ElementaryTypeName","src":"858:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"857:17:0"},"src":"825:50:0"},{"documentation":{"id":14,"nodeType":"StructuredDocumentation","src":"881:82:0","text":" @dev The owner is not a valid owner account. (eg. `address(0)`)"},"errorSelector":"1e4fbdf7","id":18,"name":"OwnableInvalidOwner","nameLocation":"974:19:0","nodeType":"ErrorDefinition","parameters":{"id":17,"nodeType":"ParameterList","parameters":[{"constant":false,"id":16,"mutability":"mutable","name":"owner","nameLocation":"1002:5:0","nodeType":"VariableDeclaration","scope":18,"src":"994:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":15,"name":"address","nodeType":"ElementaryTypeName","src":"994:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"993:15:0"},"src":"968:41:0"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":24,"name":"OwnershipTransferred","nameLocation":"1021:20:0","nodeType":"EventDefinition","parameters":{"id":23,"nodeType":"ParameterList","parameters":[{"constant":false,"id":20,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"1058:13:0","nodeType":"VariableDeclaration","scope":24,"src":"1042:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":19,"name":"address","nodeType":"ElementaryTypeName","src":"1042:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":22,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"1089:8:0","nodeType":"VariableDeclaration","scope":24,"src":"1073:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":21,"name":"address","nodeType":"ElementaryTypeName","src":"1073:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1041:57:0"},"src":"1015:84:0"},{"body":{"id":49,"nodeType":"Block","src":"1259:153:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":35,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":30,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"1273:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":33,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1297:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":32,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1289:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":31,"name":"address","nodeType":"ElementaryTypeName","src":"1289:7:0","typeDescriptions":{}}},"id":34,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1289:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1273:26:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":44,"nodeType":"IfStatement","src":"1269:95:0","trueBody":{"id":43,"nodeType":"Block","src":"1301:63:0","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":39,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1350:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":38,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1342:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":37,"name":"address","nodeType":"ElementaryTypeName","src":"1342:7:0","typeDescriptions":{}}},"id":40,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1342:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":36,"name":"OwnableInvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"1322:19:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":41,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1322:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42,"nodeType":"RevertStatement","src":"1315:38:0"}]}},{"expression":{"arguments":[{"id":46,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"1392:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":45,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"1373:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":47,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1373:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":48,"nodeType":"ExpressionStatement","src":"1373:32:0"}]},"documentation":{"id":25,"nodeType":"StructuredDocumentation","src":"1105:115:0","text":" @dev Initializes the contract setting the address provided by the deployer as the initial owner."},"id":50,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":28,"nodeType":"ParameterList","parameters":[{"constant":false,"id":27,"mutability":"mutable","name":"initialOwner","nameLocation":"1245:12:0","nodeType":"VariableDeclaration","scope":50,"src":"1237:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":26,"name":"address","nodeType":"ElementaryTypeName","src":"1237:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1236:22:0"},"returnParameters":{"id":29,"nodeType":"ParameterList","parameters":[],"src":"1259:0:0"},"scope":147,"src":"1225:187:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":57,"nodeType":"Block","src":"1521:41:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":53,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":84,"src":"1531:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":54,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1531:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":55,"nodeType":"ExpressionStatement","src":"1531:13:0"},{"id":56,"nodeType":"PlaceholderStatement","src":"1554:1:0"}]},"documentation":{"id":51,"nodeType":"StructuredDocumentation","src":"1418:77:0","text":" @dev Throws if called by any account other than the owner."},"id":58,"name":"onlyOwner","nameLocation":"1509:9:0","nodeType":"ModifierDefinition","parameters":{"id":52,"nodeType":"ParameterList","parameters":[],"src":"1518:2:0"},"src":"1500:62:0","virtual":false,"visibility":"internal"},{"body":{"id":66,"nodeType":"Block","src":"1693:30:0","statements":[{"expression":{"id":64,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"1710:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":63,"id":65,"nodeType":"Return","src":"1703:13:0"}]},"documentation":{"id":59,"nodeType":"StructuredDocumentation","src":"1568:65:0","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":67,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1647:5:0","nodeType":"FunctionDefinition","parameters":{"id":60,"nodeType":"ParameterList","parameters":[],"src":"1652:2:0"},"returnParameters":{"id":63,"nodeType":"ParameterList","parameters":[{"constant":false,"id":62,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":67,"src":"1684:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":61,"name":"address","nodeType":"ElementaryTypeName","src":"1684:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1683:9:0"},"scope":147,"src":"1638:85:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":83,"nodeType":"Block","src":"1841:117:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":75,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":71,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67,"src":"1855:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":72,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1855:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":73,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":159,"src":"1866:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":74,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1866:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1855:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":82,"nodeType":"IfStatement","src":"1851:101:0","trueBody":{"id":81,"nodeType":"Block","src":"1880:72:0","statements":[{"errorCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":77,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":159,"src":"1928:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":78,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1928:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":76,"name":"OwnableUnauthorizedAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"1901:26:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":79,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1901:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":80,"nodeType":"RevertStatement","src":"1894:47:0"}]}}]},"documentation":{"id":68,"nodeType":"StructuredDocumentation","src":"1729:62:0","text":" @dev Throws if the sender is not the owner."},"id":84,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1805:11:0","nodeType":"FunctionDefinition","parameters":{"id":69,"nodeType":"ParameterList","parameters":[],"src":"1816:2:0"},"returnParameters":{"id":70,"nodeType":"ParameterList","parameters":[],"src":"1841:0:0"},"scope":147,"src":"1796:162:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":97,"nodeType":"Block","src":"2347:47:0","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":93,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2384:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":92,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2376:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":91,"name":"address","nodeType":"ElementaryTypeName","src":"2376:7:0","typeDescriptions":{}}},"id":94,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2376:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":90,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"2357:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":95,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2357:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":96,"nodeType":"ExpressionStatement","src":"2357:30:0"}]},"documentation":{"id":85,"nodeType":"StructuredDocumentation","src":"1964:324:0","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":98,"implemented":true,"kind":"function","modifiers":[{"id":88,"kind":"modifierInvocation","modifierName":{"id":87,"name":"onlyOwner","nameLocations":["2337:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"2337:9:0"},"nodeType":"ModifierInvocation","src":"2337:9:0"}],"name":"renounceOwnership","nameLocation":"2302:17:0","nodeType":"FunctionDefinition","parameters":{"id":86,"nodeType":"ParameterList","parameters":[],"src":"2319:2:0"},"returnParameters":{"id":89,"nodeType":"ParameterList","parameters":[],"src":"2347:0:0"},"scope":147,"src":"2293:101:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":125,"nodeType":"Block","src":"2613:145:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":106,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"2627:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":109,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2647:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":108,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2639:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":107,"name":"address","nodeType":"ElementaryTypeName","src":"2639:7:0","typeDescriptions":{}}},"id":110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2639:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2627:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":120,"nodeType":"IfStatement","src":"2623:91:0","trueBody":{"id":119,"nodeType":"Block","src":"2651:63:0","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2700:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":114,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2692:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":113,"name":"address","nodeType":"ElementaryTypeName","src":"2692:7:0","typeDescriptions":{}}},"id":116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2692:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":112,"name":"OwnableInvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"2672:19:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2672:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":118,"nodeType":"RevertStatement","src":"2665:38:0"}]}},{"expression":{"arguments":[{"id":122,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"2742:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":121,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"2723:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2723:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":124,"nodeType":"ExpressionStatement","src":"2723:28:0"}]},"documentation":{"id":99,"nodeType":"StructuredDocumentation","src":"2400:138:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":126,"implemented":true,"kind":"function","modifiers":[{"id":104,"kind":"modifierInvocation","modifierName":{"id":103,"name":"onlyOwner","nameLocations":["2603:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"2603:9:0"},"nodeType":"ModifierInvocation","src":"2603:9:0"}],"name":"transferOwnership","nameLocation":"2552:17:0","nodeType":"FunctionDefinition","parameters":{"id":102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":101,"mutability":"mutable","name":"newOwner","nameLocation":"2578:8:0","nodeType":"VariableDeclaration","scope":126,"src":"2570:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":100,"name":"address","nodeType":"ElementaryTypeName","src":"2570:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2569:18:0"},"returnParameters":{"id":105,"nodeType":"ParameterList","parameters":[],"src":"2613:0:0"},"scope":147,"src":"2543:215:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":145,"nodeType":"Block","src":"2975:124:0","statements":[{"assignments":[133],"declarations":[{"constant":false,"id":133,"mutability":"mutable","name":"oldOwner","nameLocation":"2993:8:0","nodeType":"VariableDeclaration","scope":145,"src":"2985:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":132,"name":"address","nodeType":"ElementaryTypeName","src":"2985:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":135,"initialValue":{"id":134,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"3004:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2985:25:0"},{"expression":{"id":138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":136,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"3020:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":137,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":129,"src":"3029:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3020:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":139,"nodeType":"ExpressionStatement","src":"3020:17:0"},{"eventCall":{"arguments":[{"id":141,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":133,"src":"3073:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":142,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":129,"src":"3083:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":140,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"3052:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":143,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3052:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":144,"nodeType":"EmitStatement","src":"3047:45:0"}]},"documentation":{"id":127,"nodeType":"StructuredDocumentation","src":"2764:143:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":146,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2921:18:0","nodeType":"FunctionDefinition","parameters":{"id":130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":129,"mutability":"mutable","name":"newOwner","nameLocation":"2948:8:0","nodeType":"VariableDeclaration","scope":146,"src":"2940:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":128,"name":"address","nodeType":"ElementaryTypeName","src":"2940:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2939:18:0"},"returnParameters":{"id":131,"nodeType":"ParameterList","parameters":[],"src":"2975:0:0"},"scope":147,"src":"2912:187:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":148,"src":"663:2438:0","usedErrors":[13,18],"usedEvents":[24]}],"src":"102:3000:0"},"id":0},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[177]},"id":178,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":149,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:1"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":150,"nodeType":"StructuredDocumentation","src":"127:496:1","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":177,"linearizedBaseContracts":[177],"name":"Context","nameLocation":"642:7:1","nodeType":"ContractDefinition","nodes":[{"body":{"id":158,"nodeType":"Block","src":"718:34:1","statements":[{"expression":{"expression":{"id":155,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"735:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:1","memberName":"sender","nodeType":"MemberAccess","src":"735:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":154,"id":157,"nodeType":"Return","src":"728:17:1"}]},"id":159,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"665:10:1","nodeType":"FunctionDefinition","parameters":{"id":151,"nodeType":"ParameterList","parameters":[],"src":"675:2:1"},"returnParameters":{"id":154,"nodeType":"ParameterList","parameters":[{"constant":false,"id":153,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":159,"src":"709:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":152,"name":"address","nodeType":"ElementaryTypeName","src":"709:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"708:9:1"},"scope":177,"src":"656:96:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":167,"nodeType":"Block","src":"825:32:1","statements":[{"expression":{"expression":{"id":164,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"842:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"846:4:1","memberName":"data","nodeType":"MemberAccess","src":"842:8:1","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":163,"id":166,"nodeType":"Return","src":"835:15:1"}]},"id":168,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"767:8:1","nodeType":"FunctionDefinition","parameters":{"id":160,"nodeType":"ParameterList","parameters":[],"src":"775:2:1"},"returnParameters":{"id":163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":162,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":168,"src":"809:14:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":161,"name":"bytes","nodeType":"ElementaryTypeName","src":"809:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"808:16:1"},"scope":177,"src":"758:99:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":175,"nodeType":"Block","src":"935:25:1","statements":[{"expression":{"hexValue":"30","id":173,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"952:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":172,"id":174,"nodeType":"Return","src":"945:8:1"}]},"id":176,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"872:20:1","nodeType":"FunctionDefinition","parameters":{"id":169,"nodeType":"ParameterList","parameters":[],"src":"892:2:1"},"returnParameters":{"id":172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":171,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":176,"src":"926:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":170,"name":"uint256","nodeType":"ElementaryTypeName","src":"926:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"925:9:1"},"scope":177,"src":"863:97:1","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":178,"src":"624:338:1","usedErrors":[],"usedEvents":[]}],"src":"101:862:1"},"id":1},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/ReentrancyGuard.sol","exportedSymbols":{"ReentrancyGuard":[246]},"id":247,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":179,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"109:24:2"},{"abstract":true,"baseContracts":[],"canonicalName":"ReentrancyGuard","contractDependencies":[],"contractKind":"contract","documentation":{"id":180,"nodeType":"StructuredDocumentation","src":"135:894:2","text":" @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n consider using {ReentrancyGuardTransient} instead.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."},"fullyImplemented":true,"id":246,"linearizedBaseContracts":[246],"name":"ReentrancyGuard","nameLocation":"1048:15:2","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":183,"mutability":"constant","name":"NOT_ENTERED","nameLocation":"1843:11:2","nodeType":"VariableDeclaration","scope":246,"src":"1818:40:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":181,"name":"uint256","nodeType":"ElementaryTypeName","src":"1818:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1857:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":true,"id":186,"mutability":"constant","name":"ENTERED","nameLocation":"1889:7:2","nodeType":"VariableDeclaration","scope":246,"src":"1864:36:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":184,"name":"uint256","nodeType":"ElementaryTypeName","src":"1864:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1899:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"constant":false,"id":188,"mutability":"mutable","name":"_status","nameLocation":"1923:7:2","nodeType":"VariableDeclaration","scope":246,"src":"1907:23:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":187,"name":"uint256","nodeType":"ElementaryTypeName","src":"1907:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"documentation":{"id":189,"nodeType":"StructuredDocumentation","src":"1937:52:2","text":" @dev Unauthorized reentrant call."},"errorSelector":"3ee5aeb5","id":191,"name":"ReentrancyGuardReentrantCall","nameLocation":"2000:28:2","nodeType":"ErrorDefinition","parameters":{"id":190,"nodeType":"ParameterList","parameters":[],"src":"2028:2:2"},"src":"1994:37:2"},{"body":{"id":198,"nodeType":"Block","src":"2051:38:2","statements":[{"expression":{"id":196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":194,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":188,"src":"2061:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":195,"name":"NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":183,"src":"2071:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2061:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":197,"nodeType":"ExpressionStatement","src":"2061:21:2"}]},"id":199,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":192,"nodeType":"ParameterList","parameters":[],"src":"2048:2:2"},"returnParameters":{"id":193,"nodeType":"ParameterList","parameters":[],"src":"2051:0:2"},"scope":246,"src":"2037:52:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":209,"nodeType":"Block","src":"2490:79:2","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":202,"name":"_nonReentrantBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":226,"src":"2500:19:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":203,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2500:21:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":204,"nodeType":"ExpressionStatement","src":"2500:21:2"},{"id":205,"nodeType":"PlaceholderStatement","src":"2531:1:2"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":206,"name":"_nonReentrantAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":234,"src":"2542:18:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":207,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2542:20:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":208,"nodeType":"ExpressionStatement","src":"2542:20:2"}]},"documentation":{"id":200,"nodeType":"StructuredDocumentation","src":"2095:366:2","text":" @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."},"id":210,"name":"nonReentrant","nameLocation":"2475:12:2","nodeType":"ModifierDefinition","parameters":{"id":201,"nodeType":"ParameterList","parameters":[],"src":"2487:2:2"},"src":"2466:103:2","virtual":false,"visibility":"internal"},{"body":{"id":225,"nodeType":"Block","src":"2614:268:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":213,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":188,"src":"2702:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":214,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":186,"src":"2713:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2702:18:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":220,"nodeType":"IfStatement","src":"2698:86:2","trueBody":{"id":219,"nodeType":"Block","src":"2722:62:2","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":216,"name":"ReentrancyGuardReentrantCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":191,"src":"2743:28:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":217,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2743:30:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":218,"nodeType":"RevertStatement","src":"2736:37:2"}]}},{"expression":{"id":223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":221,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":188,"src":"2858:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":222,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":186,"src":"2868:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2858:17:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":224,"nodeType":"ExpressionStatement","src":"2858:17:2"}]},"id":226,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantBefore","nameLocation":"2584:19:2","nodeType":"FunctionDefinition","parameters":{"id":211,"nodeType":"ParameterList","parameters":[],"src":"2603:2:2"},"returnParameters":{"id":212,"nodeType":"ParameterList","parameters":[],"src":"2614:0:2"},"scope":246,"src":"2575:307:2","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":233,"nodeType":"Block","src":"2926:170:2","statements":[{"expression":{"id":231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":229,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":188,"src":"3068:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":230,"name":"NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":183,"src":"3078:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3068:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":232,"nodeType":"ExpressionStatement","src":"3068:21:2"}]},"id":234,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantAfter","nameLocation":"2897:18:2","nodeType":"FunctionDefinition","parameters":{"id":227,"nodeType":"ParameterList","parameters":[],"src":"2915:2:2"},"returnParameters":{"id":228,"nodeType":"ParameterList","parameters":[],"src":"2926:0:2"},"scope":246,"src":"2888:208:2","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":244,"nodeType":"Block","src":"3339:42:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":240,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":188,"src":"3356:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":241,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":186,"src":"3367:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3356:18:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":239,"id":243,"nodeType":"Return","src":"3349:25:2"}]},"documentation":{"id":235,"nodeType":"StructuredDocumentation","src":"3102:168:2","text":" @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."},"id":245,"implemented":true,"kind":"function","modifiers":[],"name":"_reentrancyGuardEntered","nameLocation":"3284:23:2","nodeType":"FunctionDefinition","parameters":{"id":236,"nodeType":"ParameterList","parameters":[],"src":"3307:2:2"},"returnParameters":{"id":239,"nodeType":"ParameterList","parameters":[{"constant":false,"id":238,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":245,"src":"3333:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":237,"name":"bool","nodeType":"ElementaryTypeName","src":"3333:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3332:6:2"},"scope":246,"src":"3275:106:2","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":247,"src":"1030:2353:2","usedErrors":[191],"usedEvents":[]}],"src":"109:3275:2"},"id":2},"@openzeppelin/contracts/utils/cryptography/Hashes.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/Hashes.sol","exportedSymbols":{"Hashes":[286]},"id":287,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":248,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"113:24:3"},{"abstract":false,"baseContracts":[],"canonicalName":"Hashes","contractDependencies":[],"contractKind":"library","documentation":{"id":249,"nodeType":"StructuredDocumentation","src":"139:81:3","text":" @dev Library of standard hash functions.\n _Available since v5.1._"},"fullyImplemented":true,"id":286,"linearizedBaseContracts":[286],"name":"Hashes","nameLocation":"229:6:3","nodeType":"ContractDefinition","nodes":[{"body":{"id":272,"nodeType":"Block","src":"588:83:3","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":259,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"605:1:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":260,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"609:1:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"605:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":267,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"659:1:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":268,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"662:1:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":266,"name":"efficientKeccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":285,"src":"640:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":269,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"640:24:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"605:59:3","trueExpression":{"arguments":[{"id":263,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"632:1:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":264,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"635:1:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":262,"name":"efficientKeccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":285,"src":"613:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":265,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"613:24:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":258,"id":271,"nodeType":"Return","src":"598:66:3"}]},"documentation":{"id":250,"nodeType":"StructuredDocumentation","src":"242:257:3","text":" @dev Commutative Keccak256 hash of a sorted pair of bytes32. Frequently used when working with merkle proofs.\n NOTE: Equivalent to the `standardNodeHash` in our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]."},"id":273,"implemented":true,"kind":"function","modifiers":[],"name":"commutativeKeccak256","nameLocation":"513:20:3","nodeType":"FunctionDefinition","parameters":{"id":255,"nodeType":"ParameterList","parameters":[{"constant":false,"id":252,"mutability":"mutable","name":"a","nameLocation":"542:1:3","nodeType":"VariableDeclaration","scope":273,"src":"534:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":251,"name":"bytes32","nodeType":"ElementaryTypeName","src":"534:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":254,"mutability":"mutable","name":"b","nameLocation":"553:1:3","nodeType":"VariableDeclaration","scope":273,"src":"545:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":253,"name":"bytes32","nodeType":"ElementaryTypeName","src":"545:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"533:22:3"},"returnParameters":{"id":258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":257,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":273,"src":"579:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":256,"name":"bytes32","nodeType":"ElementaryTypeName","src":"579:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"578:9:3"},"scope":286,"src":"504:167:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":284,"nodeType":"Block","src":"879:151:3","statements":[{"AST":{"nodeType":"YulBlock","src":"914:110:3","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"935:4:3","type":"","value":"0x00"},{"name":"a","nodeType":"YulIdentifier","src":"941:1:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"928:6:3"},"nodeType":"YulFunctionCall","src":"928:15:3"},"nodeType":"YulExpressionStatement","src":"928:15:3"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"963:4:3","type":"","value":"0x20"},{"name":"b","nodeType":"YulIdentifier","src":"969:1:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"956:6:3"},"nodeType":"YulFunctionCall","src":"956:15:3"},"nodeType":"YulExpressionStatement","src":"956:15:3"},{"nodeType":"YulAssignment","src":"984:30:3","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1003:4:3","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"1009:4:3","type":"","value":"0x40"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"993:9:3"},"nodeType":"YulFunctionCall","src":"993:21:3"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"984:5:3"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":276,"isOffset":false,"isSlot":false,"src":"941:1:3","valueSize":1},{"declaration":278,"isOffset":false,"isSlot":false,"src":"969:1:3","valueSize":1},{"declaration":281,"isOffset":false,"isSlot":false,"src":"984:5:3","valueSize":1}],"flags":["memory-safe"],"id":283,"nodeType":"InlineAssembly","src":"889:135:3"}]},"documentation":{"id":274,"nodeType":"StructuredDocumentation","src":"677:109:3","text":" @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory."},"id":285,"implemented":true,"kind":"function","modifiers":[],"name":"efficientKeccak256","nameLocation":"800:18:3","nodeType":"FunctionDefinition","parameters":{"id":279,"nodeType":"ParameterList","parameters":[{"constant":false,"id":276,"mutability":"mutable","name":"a","nameLocation":"827:1:3","nodeType":"VariableDeclaration","scope":285,"src":"819:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":275,"name":"bytes32","nodeType":"ElementaryTypeName","src":"819:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":278,"mutability":"mutable","name":"b","nameLocation":"838:1:3","nodeType":"VariableDeclaration","scope":285,"src":"830:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":277,"name":"bytes32","nodeType":"ElementaryTypeName","src":"830:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"818:22:3"},"returnParameters":{"id":282,"nodeType":"ParameterList","parameters":[{"constant":false,"id":281,"mutability":"mutable","name":"value","nameLocation":"872:5:3","nodeType":"VariableDeclaration","scope":285,"src":"864:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":280,"name":"bytes32","nodeType":"ElementaryTypeName","src":"864:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"863:15:3"},"scope":286,"src":"791:239:3","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":287,"src":"221:811:3","usedErrors":[],"usedEvents":[]}],"src":"113:920:3"},"id":3},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","exportedSymbols":{"Hashes":[286],"MerkleProof":[1359]},"id":1360,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":288,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"206:24:4"},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/Hashes.sol","file":"./Hashes.sol","id":290,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1360,"sourceUnit":287,"src":"232:36:4","symbolAliases":[{"foreign":{"id":289,"name":"Hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":286,"src":"240:6:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"MerkleProof","contractDependencies":[],"contractKind":"library","documentation":{"id":291,"nodeType":"StructuredDocumentation","src":"270:1082:4","text":" @dev These functions deal with verification of Merkle Tree proofs.\n The tree and the proofs can be generated using our\n https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n You will find a quickstart guide in the readme.\n WARNING: You should avoid using leaf values that are 64 bytes long prior to\n hashing, or use a hash function other than keccak256 for hashing leaves.\n This is because the concatenation of a sorted pair of internal nodes in\n the Merkle tree could be reinterpreted as a leaf value.\n OpenZeppelin's JavaScript library generates Merkle trees that are safe\n against this attack out of the box.\n IMPORTANT: Consider memory side-effects when using custom hashing functions\n that access memory in an unsafe way.\n NOTE: This library supports proof verification for merkle trees built using\n custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving\n leaf inclusion in trees built using non-commutative hashing functions requires\n additional logic that is not supported by this library."},"fullyImplemented":true,"id":1359,"linearizedBaseContracts":[1359],"name":"MerkleProof","nameLocation":"1361:11:4","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":292,"nodeType":"StructuredDocumentation","src":"1379:60:4","text":"@dev The multiproof provided is not valid."},"errorSelector":"35140492","id":294,"name":"MerkleProofInvalidMultiproof","nameLocation":"1450:28:4","nodeType":"ErrorDefinition","parameters":{"id":293,"nodeType":"ParameterList","parameters":[],"src":"1478:2:4"},"src":"1444:37:4"},{"body":{"id":314,"nodeType":"Block","src":"1999:57:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":308,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"2029:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":309,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":302,"src":"2036:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":307,"name":"processProof","nodeType":"Identifier","overloadedDeclarations":[356,438],"referencedDeclaration":356,"src":"2016:12:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bytes32) pure returns (bytes32)"}},"id":310,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2016:25:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":311,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":300,"src":"2045:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2016:33:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":306,"id":313,"nodeType":"Return","src":"2009:40:4"}]},"documentation":{"id":295,"nodeType":"StructuredDocumentation","src":"1487:410:4","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in memory with the default hashing function."},"id":315,"implemented":true,"kind":"function","modifiers":[],"name":"verify","nameLocation":"1911:6:4","nodeType":"FunctionDefinition","parameters":{"id":303,"nodeType":"ParameterList","parameters":[{"constant":false,"id":298,"mutability":"mutable","name":"proof","nameLocation":"1935:5:4","nodeType":"VariableDeclaration","scope":315,"src":"1918:22:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":296,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1918:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":297,"nodeType":"ArrayTypeName","src":"1918:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":300,"mutability":"mutable","name":"root","nameLocation":"1950:4:4","nodeType":"VariableDeclaration","scope":315,"src":"1942:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":299,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1942:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":302,"mutability":"mutable","name":"leaf","nameLocation":"1964:4:4","nodeType":"VariableDeclaration","scope":315,"src":"1956:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":301,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1956:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1917:52:4"},"returnParameters":{"id":306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":305,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":315,"src":"1993:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":304,"name":"bool","nodeType":"ElementaryTypeName","src":"1993:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1992:6:4"},"scope":1359,"src":"1902:154:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":355,"nodeType":"Block","src":"2549:216:4","statements":[{"assignments":[327],"declarations":[{"constant":false,"id":327,"mutability":"mutable","name":"computedHash","nameLocation":"2567:12:4","nodeType":"VariableDeclaration","scope":355,"src":"2559:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":326,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2559:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":329,"initialValue":{"id":328,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":321,"src":"2582:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2559:27:4"},{"body":{"id":351,"nodeType":"Block","src":"2639:91:4","statements":[{"expression":{"id":349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":341,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"2653:12:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":344,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"2696:12:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":345,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":319,"src":"2710:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":347,"indexExpression":{"id":346,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":331,"src":"2716:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2710:8:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":342,"name":"Hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":286,"src":"2668:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Hashes_$286_$","typeString":"type(library Hashes)"}},"id":343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2675:20:4","memberName":"commutativeKeccak256","nodeType":"MemberAccess","referencedDeclaration":273,"src":"2668:27:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":348,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2668:51:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2653:66:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":350,"nodeType":"ExpressionStatement","src":"2653:66:4"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":334,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":331,"src":"2616:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":335,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":319,"src":"2620:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2626:6:4","memberName":"length","nodeType":"MemberAccess","src":"2620:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2616:16:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":352,"initializationExpression":{"assignments":[331],"declarations":[{"constant":false,"id":331,"mutability":"mutable","name":"i","nameLocation":"2609:1:4","nodeType":"VariableDeclaration","scope":352,"src":"2601:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":330,"name":"uint256","nodeType":"ElementaryTypeName","src":"2601:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":333,"initialValue":{"hexValue":"30","id":332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2613:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2601:13:4"},"loopExpression":{"expression":{"id":339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2634:3:4","subExpression":{"id":338,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":331,"src":"2634:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":340,"nodeType":"ExpressionStatement","src":"2634:3:4"},"nodeType":"ForStatement","src":"2596:134:4"},{"expression":{"id":353,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"2746:12:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":325,"id":354,"nodeType":"Return","src":"2739:19:4"}]},"documentation":{"id":316,"nodeType":"StructuredDocumentation","src":"2062:390:4","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in memory with the default hashing function."},"id":356,"implemented":true,"kind":"function","modifiers":[],"name":"processProof","nameLocation":"2466:12:4","nodeType":"FunctionDefinition","parameters":{"id":322,"nodeType":"ParameterList","parameters":[{"constant":false,"id":319,"mutability":"mutable","name":"proof","nameLocation":"2496:5:4","nodeType":"VariableDeclaration","scope":356,"src":"2479:22:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":317,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2479:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":318,"nodeType":"ArrayTypeName","src":"2479:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":321,"mutability":"mutable","name":"leaf","nameLocation":"2511:4:4","nodeType":"VariableDeclaration","scope":356,"src":"2503:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":320,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2503:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2478:38:4"},"returnParameters":{"id":325,"nodeType":"ParameterList","parameters":[{"constant":false,"id":324,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":356,"src":"2540:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":323,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2540:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2539:9:4"},"scope":1359,"src":"2457:308:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":387,"nodeType":"Block","src":"3376:65:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":380,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":360,"src":"3406:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":381,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":364,"src":"3413:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":382,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":374,"src":"3419:6:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}],"id":379,"name":"processProof","nodeType":"Identifier","overloadedDeclarations":[356,438],"referencedDeclaration":438,"src":"3393:12:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bytes32,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"}},"id":383,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3393:33:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":384,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":362,"src":"3430:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3393:41:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":378,"id":386,"nodeType":"Return","src":"3386:48:4"}]},"documentation":{"id":357,"nodeType":"StructuredDocumentation","src":"2771:407:4","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in memory with a custom hashing function."},"id":388,"implemented":true,"kind":"function","modifiers":[],"name":"verify","nameLocation":"3192:6:4","nodeType":"FunctionDefinition","parameters":{"id":375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":360,"mutability":"mutable","name":"proof","nameLocation":"3225:5:4","nodeType":"VariableDeclaration","scope":388,"src":"3208:22:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":358,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3208:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":359,"nodeType":"ArrayTypeName","src":"3208:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":362,"mutability":"mutable","name":"root","nameLocation":"3248:4:4","nodeType":"VariableDeclaration","scope":388,"src":"3240:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":361,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3240:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":364,"mutability":"mutable","name":"leaf","nameLocation":"3270:4:4","nodeType":"VariableDeclaration","scope":388,"src":"3262:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":363,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3262:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":374,"mutability":"mutable","name":"hasher","nameLocation":"3334:6:4","nodeType":"VariableDeclaration","scope":388,"src":"3284:56:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":373,"nodeType":"FunctionTypeName","parameterTypes":{"id":369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":366,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":373,"src":"3293:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":365,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3293:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":368,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":373,"src":"3302:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":367,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3302:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3292:18:4"},"returnParameterTypes":{"id":372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":371,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":373,"src":"3325:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":370,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3325:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3324:9:4"},"src":"3284:56:4","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"3198:148:4"},"returnParameters":{"id":378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":377,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":388,"src":"3370:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":376,"name":"bool","nodeType":"ElementaryTypeName","src":"3370:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3369:6:4"},"scope":1359,"src":"3183:258:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":437,"nodeType":"Block","src":"4019:195:4","statements":[{"assignments":[410],"declarations":[{"constant":false,"id":410,"mutability":"mutable","name":"computedHash","nameLocation":"4037:12:4","nodeType":"VariableDeclaration","scope":437,"src":"4029:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":409,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4029:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":412,"initialValue":{"id":411,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":394,"src":"4052:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4029:27:4"},{"body":{"id":433,"nodeType":"Block","src":"4109:70:4","statements":[{"expression":{"id":431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":424,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":410,"src":"4123:12:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":426,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":410,"src":"4145:12:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":427,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":392,"src":"4159:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":429,"indexExpression":{"id":428,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"4165:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4159:8:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":425,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":404,"src":"4138:6:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}},"id":430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4138:30:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4123:45:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":432,"nodeType":"ExpressionStatement","src":"4123:45:4"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":417,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"4086:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":418,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":392,"src":"4090:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4096:6:4","memberName":"length","nodeType":"MemberAccess","src":"4090:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4086:16:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":434,"initializationExpression":{"assignments":[414],"declarations":[{"constant":false,"id":414,"mutability":"mutable","name":"i","nameLocation":"4079:1:4","nodeType":"VariableDeclaration","scope":434,"src":"4071:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":413,"name":"uint256","nodeType":"ElementaryTypeName","src":"4071:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":416,"initialValue":{"hexValue":"30","id":415,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4083:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"4071:13:4"},"loopExpression":{"expression":{"id":422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"4104:3:4","subExpression":{"id":421,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"4104:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":423,"nodeType":"ExpressionStatement","src":"4104:3:4"},"nodeType":"ForStatement","src":"4066:113:4"},{"expression":{"id":435,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":410,"src":"4195:12:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":408,"id":436,"nodeType":"Return","src":"4188:19:4"}]},"documentation":{"id":389,"nodeType":"StructuredDocumentation","src":"3447:387:4","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in memory with a custom hashing function."},"id":438,"implemented":true,"kind":"function","modifiers":[],"name":"processProof","nameLocation":"3848:12:4","nodeType":"FunctionDefinition","parameters":{"id":405,"nodeType":"ParameterList","parameters":[{"constant":false,"id":392,"mutability":"mutable","name":"proof","nameLocation":"3887:5:4","nodeType":"VariableDeclaration","scope":438,"src":"3870:22:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":390,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3870:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":391,"nodeType":"ArrayTypeName","src":"3870:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":394,"mutability":"mutable","name":"leaf","nameLocation":"3910:4:4","nodeType":"VariableDeclaration","scope":438,"src":"3902:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":393,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3902:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":404,"mutability":"mutable","name":"hasher","nameLocation":"3974:6:4","nodeType":"VariableDeclaration","scope":438,"src":"3924:56:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":403,"nodeType":"FunctionTypeName","parameterTypes":{"id":399,"nodeType":"ParameterList","parameters":[{"constant":false,"id":396,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":403,"src":"3933:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":395,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3933:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":398,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":403,"src":"3942:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":397,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3942:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3932:18:4"},"returnParameterTypes":{"id":402,"nodeType":"ParameterList","parameters":[{"constant":false,"id":401,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":403,"src":"3965:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":400,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3965:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3964:9:4"},"src":"3924:56:4","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"3860:126:4"},"returnParameters":{"id":408,"nodeType":"ParameterList","parameters":[{"constant":false,"id":407,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":438,"src":"4010:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":406,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4010:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4009:9:4"},"scope":1359,"src":"3839:375:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":458,"nodeType":"Block","src":"4744:65:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":452,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":442,"src":"4782:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":453,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":446,"src":"4789:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":451,"name":"processProofCalldata","nodeType":"Identifier","overloadedDeclarations":[500,582],"referencedDeclaration":500,"src":"4761:20:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bytes32) pure returns (bytes32)"}},"id":454,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4761:33:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":455,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":444,"src":"4798:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4761:41:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":450,"id":457,"nodeType":"Return","src":"4754:48:4"}]},"documentation":{"id":439,"nodeType":"StructuredDocumentation","src":"4220:412:4","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in calldata with the default hashing function."},"id":459,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCalldata","nameLocation":"4646:14:4","nodeType":"FunctionDefinition","parameters":{"id":447,"nodeType":"ParameterList","parameters":[{"constant":false,"id":442,"mutability":"mutable","name":"proof","nameLocation":"4680:5:4","nodeType":"VariableDeclaration","scope":459,"src":"4661:24:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":440,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4661:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":441,"nodeType":"ArrayTypeName","src":"4661:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":444,"mutability":"mutable","name":"root","nameLocation":"4695:4:4","nodeType":"VariableDeclaration","scope":459,"src":"4687:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":443,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4687:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":446,"mutability":"mutable","name":"leaf","nameLocation":"4709:4:4","nodeType":"VariableDeclaration","scope":459,"src":"4701:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":445,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4701:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4660:54:4"},"returnParameters":{"id":450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":449,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":459,"src":"4738:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":448,"name":"bool","nodeType":"ElementaryTypeName","src":"4738:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4737:6:4"},"scope":1359,"src":"4637:172:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":499,"nodeType":"Block","src":"5314:216:4","statements":[{"assignments":[471],"declarations":[{"constant":false,"id":471,"mutability":"mutable","name":"computedHash","nameLocation":"5332:12:4","nodeType":"VariableDeclaration","scope":499,"src":"5324:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":470,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5324:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":473,"initialValue":{"id":472,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":465,"src":"5347:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5324:27:4"},{"body":{"id":495,"nodeType":"Block","src":"5404:91:4","statements":[{"expression":{"id":493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":485,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":471,"src":"5418:12:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":488,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":471,"src":"5461:12:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":489,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":463,"src":"5475:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":491,"indexExpression":{"id":490,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":475,"src":"5481:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5475:8:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":486,"name":"Hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":286,"src":"5433:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Hashes_$286_$","typeString":"type(library Hashes)"}},"id":487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5440:20:4","memberName":"commutativeKeccak256","nodeType":"MemberAccess","referencedDeclaration":273,"src":"5433:27:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":492,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5433:51:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"5418:66:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":494,"nodeType":"ExpressionStatement","src":"5418:66:4"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":478,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":475,"src":"5381:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":479,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":463,"src":"5385:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5391:6:4","memberName":"length","nodeType":"MemberAccess","src":"5385:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5381:16:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":496,"initializationExpression":{"assignments":[475],"declarations":[{"constant":false,"id":475,"mutability":"mutable","name":"i","nameLocation":"5374:1:4","nodeType":"VariableDeclaration","scope":496,"src":"5366:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":474,"name":"uint256","nodeType":"ElementaryTypeName","src":"5366:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":477,"initialValue":{"hexValue":"30","id":476,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5378:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5366:13:4"},"loopExpression":{"expression":{"id":483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"5399:3:4","subExpression":{"id":482,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":475,"src":"5399:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":484,"nodeType":"ExpressionStatement","src":"5399:3:4"},"nodeType":"ForStatement","src":"5361:134:4"},{"expression":{"id":497,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":471,"src":"5511:12:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":469,"id":498,"nodeType":"Return","src":"5504:19:4"}]},"documentation":{"id":460,"nodeType":"StructuredDocumentation","src":"4815:392:4","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in calldata with the default hashing function."},"id":500,"implemented":true,"kind":"function","modifiers":[],"name":"processProofCalldata","nameLocation":"5221:20:4","nodeType":"FunctionDefinition","parameters":{"id":466,"nodeType":"ParameterList","parameters":[{"constant":false,"id":463,"mutability":"mutable","name":"proof","nameLocation":"5261:5:4","nodeType":"VariableDeclaration","scope":500,"src":"5242:24:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":461,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5242:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":462,"nodeType":"ArrayTypeName","src":"5242:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":465,"mutability":"mutable","name":"leaf","nameLocation":"5276:4:4","nodeType":"VariableDeclaration","scope":500,"src":"5268:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":464,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5268:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5241:40:4"},"returnParameters":{"id":469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":468,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":500,"src":"5305:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":467,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5305:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5304:9:4"},"scope":1359,"src":"5212:318:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":531,"nodeType":"Block","src":"6153:73:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":524,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":504,"src":"6191:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":525,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":508,"src":"6198:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":526,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":518,"src":"6204:6:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}],"id":523,"name":"processProofCalldata","nodeType":"Identifier","overloadedDeclarations":[500,582],"referencedDeclaration":582,"src":"6170:20:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bytes32,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"}},"id":527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6170:41:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":528,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":506,"src":"6215:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6170:49:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":522,"id":530,"nodeType":"Return","src":"6163:56:4"}]},"documentation":{"id":501,"nodeType":"StructuredDocumentation","src":"5536:409:4","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in calldata with a custom hashing function."},"id":532,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCalldata","nameLocation":"5959:14:4","nodeType":"FunctionDefinition","parameters":{"id":519,"nodeType":"ParameterList","parameters":[{"constant":false,"id":504,"mutability":"mutable","name":"proof","nameLocation":"6002:5:4","nodeType":"VariableDeclaration","scope":532,"src":"5983:24:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":502,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5983:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":503,"nodeType":"ArrayTypeName","src":"5983:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":506,"mutability":"mutable","name":"root","nameLocation":"6025:4:4","nodeType":"VariableDeclaration","scope":532,"src":"6017:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":505,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6017:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":508,"mutability":"mutable","name":"leaf","nameLocation":"6047:4:4","nodeType":"VariableDeclaration","scope":532,"src":"6039:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":507,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6039:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":518,"mutability":"mutable","name":"hasher","nameLocation":"6111:6:4","nodeType":"VariableDeclaration","scope":532,"src":"6061:56:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":517,"nodeType":"FunctionTypeName","parameterTypes":{"id":513,"nodeType":"ParameterList","parameters":[{"constant":false,"id":510,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":517,"src":"6070:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":509,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6070:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":512,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":517,"src":"6079:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":511,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6079:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6069:18:4"},"returnParameterTypes":{"id":516,"nodeType":"ParameterList","parameters":[{"constant":false,"id":515,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":517,"src":"6102:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":514,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6102:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6101:9:4"},"src":"6061:56:4","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"5973:150:4"},"returnParameters":{"id":522,"nodeType":"ParameterList","parameters":[{"constant":false,"id":521,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":532,"src":"6147:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":520,"name":"bool","nodeType":"ElementaryTypeName","src":"6147:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6146:6:4"},"scope":1359,"src":"5950:276:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":581,"nodeType":"Block","src":"6816:195:4","statements":[{"assignments":[554],"declarations":[{"constant":false,"id":554,"mutability":"mutable","name":"computedHash","nameLocation":"6834:12:4","nodeType":"VariableDeclaration","scope":581,"src":"6826:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":553,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6826:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":556,"initialValue":{"id":555,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":538,"src":"6849:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6826:27:4"},{"body":{"id":577,"nodeType":"Block","src":"6906:70:4","statements":[{"expression":{"id":575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":568,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"6920:12:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":570,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"6942:12:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":571,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":536,"src":"6956:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":573,"indexExpression":{"id":572,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":558,"src":"6962:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6956:8:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":569,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":548,"src":"6935:6:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}},"id":574,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6935:30:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6920:45:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":576,"nodeType":"ExpressionStatement","src":"6920:45:4"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":561,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":558,"src":"6883:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":562,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":536,"src":"6887:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6893:6:4","memberName":"length","nodeType":"MemberAccess","src":"6887:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6883:16:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":578,"initializationExpression":{"assignments":[558],"declarations":[{"constant":false,"id":558,"mutability":"mutable","name":"i","nameLocation":"6876:1:4","nodeType":"VariableDeclaration","scope":578,"src":"6868:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":557,"name":"uint256","nodeType":"ElementaryTypeName","src":"6868:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":560,"initialValue":{"hexValue":"30","id":559,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6880:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6868:13:4"},"loopExpression":{"expression":{"id":566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6901:3:4","subExpression":{"id":565,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":558,"src":"6901:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":567,"nodeType":"ExpressionStatement","src":"6901:3:4"},"nodeType":"ForStatement","src":"6863:113:4"},{"expression":{"id":579,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"6992:12:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":552,"id":580,"nodeType":"Return","src":"6985:19:4"}]},"documentation":{"id":533,"nodeType":"StructuredDocumentation","src":"6232:389:4","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in calldata with a custom hashing function."},"id":582,"implemented":true,"kind":"function","modifiers":[],"name":"processProofCalldata","nameLocation":"6635:20:4","nodeType":"FunctionDefinition","parameters":{"id":549,"nodeType":"ParameterList","parameters":[{"constant":false,"id":536,"mutability":"mutable","name":"proof","nameLocation":"6684:5:4","nodeType":"VariableDeclaration","scope":582,"src":"6665:24:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":534,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6665:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":535,"nodeType":"ArrayTypeName","src":"6665:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":538,"mutability":"mutable","name":"leaf","nameLocation":"6707:4:4","nodeType":"VariableDeclaration","scope":582,"src":"6699:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":537,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6699:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":548,"mutability":"mutable","name":"hasher","nameLocation":"6771:6:4","nodeType":"VariableDeclaration","scope":582,"src":"6721:56:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":547,"nodeType":"FunctionTypeName","parameterTypes":{"id":543,"nodeType":"ParameterList","parameters":[{"constant":false,"id":540,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":547,"src":"6730:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":539,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6730:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":542,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":547,"src":"6739:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":541,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6739:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6729:18:4"},"returnParameterTypes":{"id":546,"nodeType":"ParameterList","parameters":[{"constant":false,"id":545,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":547,"src":"6762:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":544,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6762:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6761:9:4"},"src":"6721:56:4","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"6655:128:4"},"returnParameters":{"id":552,"nodeType":"ParameterList","parameters":[{"constant":false,"id":551,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":582,"src":"6807:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":550,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6807:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6806:9:4"},"scope":1359,"src":"6626:385:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":607,"nodeType":"Block","src":"7797:76:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":600,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":586,"src":"7832:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":601,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"7839:10:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},{"id":602,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"7851:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":599,"name":"processMultiProof","nodeType":"Identifier","overloadedDeclarations":[766,970],"referencedDeclaration":766,"src":"7814:17:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bool[] memory,bytes32[] memory) pure returns (bytes32)"}},"id":603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7814:44:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":604,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":591,"src":"7862:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"7814:52:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":598,"id":606,"nodeType":"Return","src":"7807:59:4"}]},"documentation":{"id":583,"nodeType":"StructuredDocumentation","src":"7017:593:4","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in memory with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProof}."},"id":608,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerify","nameLocation":"7624:16:4","nodeType":"FunctionDefinition","parameters":{"id":595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":586,"mutability":"mutable","name":"proof","nameLocation":"7667:5:4","nodeType":"VariableDeclaration","scope":608,"src":"7650:22:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":584,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7650:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":585,"nodeType":"ArrayTypeName","src":"7650:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":589,"mutability":"mutable","name":"proofFlags","nameLocation":"7696:10:4","nodeType":"VariableDeclaration","scope":608,"src":"7682:24:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":587,"name":"bool","nodeType":"ElementaryTypeName","src":"7682:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":588,"nodeType":"ArrayTypeName","src":"7682:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":591,"mutability":"mutable","name":"root","nameLocation":"7724:4:4","nodeType":"VariableDeclaration","scope":608,"src":"7716:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":590,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7716:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":594,"mutability":"mutable","name":"leaves","nameLocation":"7755:6:4","nodeType":"VariableDeclaration","scope":608,"src":"7738:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":592,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7738:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":593,"nodeType":"ArrayTypeName","src":"7738:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"7640:127:4"},"returnParameters":{"id":598,"nodeType":"ParameterList","parameters":[{"constant":false,"id":597,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":608,"src":"7791:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":596,"name":"bool","nodeType":"ElementaryTypeName","src":"7791:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7790:6:4"},"scope":1359,"src":"7615:258:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":765,"nodeType":"Block","src":"9159:2104:4","statements":[{"assignments":[624],"declarations":[{"constant":false,"id":624,"mutability":"mutable","name":"leavesLen","nameLocation":"9551:9:4","nodeType":"VariableDeclaration","scope":765,"src":"9543:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":623,"name":"uint256","nodeType":"ElementaryTypeName","src":"9543:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":627,"initialValue":{"expression":{"id":625,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":618,"src":"9563:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9570:6:4","memberName":"length","nodeType":"MemberAccess","src":"9563:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9543:33:4"},{"assignments":[629],"declarations":[{"constant":false,"id":629,"mutability":"mutable","name":"proofFlagsLen","nameLocation":"9594:13:4","nodeType":"VariableDeclaration","scope":765,"src":"9586:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":628,"name":"uint256","nodeType":"ElementaryTypeName","src":"9586:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":632,"initialValue":{"expression":{"id":630,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":615,"src":"9610:10:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9621:6:4","memberName":"length","nodeType":"MemberAccess","src":"9610:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9586:41:4"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":633,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":624,"src":"9675:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":634,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"9687:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9693:6:4","memberName":"length","nodeType":"MemberAccess","src":"9687:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9675:24:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":637,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":629,"src":"9703:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9719:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9703:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9675:45:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":645,"nodeType":"IfStatement","src":"9671:113:4","trueBody":{"id":644,"nodeType":"Block","src":"9722:62:4","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":641,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":294,"src":"9743:28:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9743:30:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":643,"nodeType":"RevertStatement","src":"9736:37:4"}]}},{"assignments":[650],"declarations":[{"constant":false,"id":650,"mutability":"mutable","name":"hashes","nameLocation":"10045:6:4","nodeType":"VariableDeclaration","scope":765,"src":"10028:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":648,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10028:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":649,"nodeType":"ArrayTypeName","src":"10028:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":656,"initialValue":{"arguments":[{"id":654,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":629,"src":"10068:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":653,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"10054:13:4","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":651,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10058:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":652,"nodeType":"ArrayTypeName","src":"10058:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":655,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10054:28:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"10028:54:4"},{"assignments":[658],"declarations":[{"constant":false,"id":658,"mutability":"mutable","name":"leafPos","nameLocation":"10100:7:4","nodeType":"VariableDeclaration","scope":765,"src":"10092:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":657,"name":"uint256","nodeType":"ElementaryTypeName","src":"10092:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":660,"initialValue":{"hexValue":"30","id":659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10110:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10092:19:4"},{"assignments":[662],"declarations":[{"constant":false,"id":662,"mutability":"mutable","name":"hashPos","nameLocation":"10129:7:4","nodeType":"VariableDeclaration","scope":765,"src":"10121:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":661,"name":"uint256","nodeType":"ElementaryTypeName","src":"10121:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":664,"initialValue":{"hexValue":"30","id":663,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10139:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10121:19:4"},{"assignments":[666],"declarations":[{"constant":false,"id":666,"mutability":"mutable","name":"proofPos","nameLocation":"10158:8:4","nodeType":"VariableDeclaration","scope":765,"src":"10150:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":665,"name":"uint256","nodeType":"ElementaryTypeName","src":"10150:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":668,"initialValue":{"hexValue":"30","id":667,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10169:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10150:20:4"},{"body":{"id":728,"nodeType":"Block","src":"10590:310:4","statements":[{"assignments":[680],"declarations":[{"constant":false,"id":680,"mutability":"mutable","name":"a","nameLocation":"10612:1:4","nodeType":"VariableDeclaration","scope":728,"src":"10604:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":679,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10604:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":693,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":681,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":658,"src":"10616:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":682,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":624,"src":"10626:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10616:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":688,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":650,"src":"10658:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":691,"indexExpression":{"id":690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10665:9:4","subExpression":{"id":689,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":662,"src":"10665:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10658:17:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10616:59:4","trueExpression":{"baseExpression":{"id":684,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":618,"src":"10638:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":687,"indexExpression":{"id":686,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10645:9:4","subExpression":{"id":685,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":658,"src":"10645:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10638:17:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"10604:71:4"},{"assignments":[695],"declarations":[{"constant":false,"id":695,"mutability":"mutable","name":"b","nameLocation":"10697:1:4","nodeType":"VariableDeclaration","scope":728,"src":"10689:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":694,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10689:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":717,"initialValue":{"condition":{"baseExpression":{"id":696,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":615,"src":"10701:10:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":698,"indexExpression":{"id":697,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":670,"src":"10712:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10701:13:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":712,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"10813:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":715,"indexExpression":{"id":714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10819:10:4","subExpression":{"id":713,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":666,"src":"10819:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10813:17:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10701:129:4","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":699,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":658,"src":"10734:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":700,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":624,"src":"10744:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10734:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":706,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":650,"src":"10776:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":709,"indexExpression":{"id":708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10783:9:4","subExpression":{"id":707,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":662,"src":"10783:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10776:17:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10734:59:4","trueExpression":{"baseExpression":{"id":702,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":618,"src":"10756:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":705,"indexExpression":{"id":704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10763:9:4","subExpression":{"id":703,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":658,"src":"10763:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10756:17:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":711,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10733:61:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"10689:141:4"},{"expression":{"id":726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":718,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":650,"src":"10844:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":720,"indexExpression":{"id":719,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":670,"src":"10851:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10844:9:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":723,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":680,"src":"10884:1:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":724,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":695,"src":"10887:1:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":721,"name":"Hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":286,"src":"10856:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Hashes_$286_$","typeString":"type(library Hashes)"}},"id":722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10863:20:4","memberName":"commutativeKeccak256","nodeType":"MemberAccess","referencedDeclaration":273,"src":"10856:27:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":725,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10856:33:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"10844:45:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":727,"nodeType":"ExpressionStatement","src":"10844:45:4"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":673,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":670,"src":"10566:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":674,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":629,"src":"10570:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10566:17:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":729,"initializationExpression":{"assignments":[670],"declarations":[{"constant":false,"id":670,"mutability":"mutable","name":"i","nameLocation":"10559:1:4","nodeType":"VariableDeclaration","scope":729,"src":"10551:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":669,"name":"uint256","nodeType":"ElementaryTypeName","src":"10551:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":672,"initialValue":{"hexValue":"30","id":671,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10563:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10551:13:4"},"loopExpression":{"expression":{"id":677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10585:3:4","subExpression":{"id":676,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":670,"src":"10585:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":678,"nodeType":"ExpressionStatement","src":"10585:3:4"},"nodeType":"ForStatement","src":"10546:354:4"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":730,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":629,"src":"10914:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":731,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10930:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10914:17:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":750,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":624,"src":"11155:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":751,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11167:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11155:13:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":762,"nodeType":"Block","src":"11217:40:4","statements":[{"expression":{"baseExpression":{"id":758,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"11238:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":760,"indexExpression":{"hexValue":"30","id":759,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11244:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11238:8:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":622,"id":761,"nodeType":"Return","src":"11231:15:4"}]},"id":763,"nodeType":"IfStatement","src":"11151:106:4","trueBody":{"id":757,"nodeType":"Block","src":"11170:41:4","statements":[{"expression":{"baseExpression":{"id":753,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":618,"src":"11191:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":755,"indexExpression":{"hexValue":"30","id":754,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11198:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11191:9:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":622,"id":756,"nodeType":"Return","src":"11184:16:4"}]}},"id":764,"nodeType":"IfStatement","src":"10910:347:4","trueBody":{"id":749,"nodeType":"Block","src":"10933:212:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":733,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":666,"src":"10951:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":734,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"10963:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10969:6:4","memberName":"length","nodeType":"MemberAccess","src":"10963:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10951:24:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":741,"nodeType":"IfStatement","src":"10947:100:4","trueBody":{"id":740,"nodeType":"Block","src":"10977:70:4","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":737,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":294,"src":"11002:28:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":738,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11002:30:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":739,"nodeType":"RevertStatement","src":"10995:37:4"}]}},{"id":748,"nodeType":"UncheckedBlock","src":"11060:75:4","statements":[{"expression":{"baseExpression":{"id":742,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":650,"src":"11095:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":746,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":743,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":629,"src":"11102:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":744,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11118:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11102:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11095:25:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":622,"id":747,"nodeType":"Return","src":"11088:32:4"}]}]}}]},"documentation":{"id":609,"nodeType":"StructuredDocumentation","src":"7879:1100:4","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in memory with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."},"id":766,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProof","nameLocation":"8993:17:4","nodeType":"FunctionDefinition","parameters":{"id":619,"nodeType":"ParameterList","parameters":[{"constant":false,"id":612,"mutability":"mutable","name":"proof","nameLocation":"9037:5:4","nodeType":"VariableDeclaration","scope":766,"src":"9020:22:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":610,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9020:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":611,"nodeType":"ArrayTypeName","src":"9020:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":615,"mutability":"mutable","name":"proofFlags","nameLocation":"9066:10:4","nodeType":"VariableDeclaration","scope":766,"src":"9052:24:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":613,"name":"bool","nodeType":"ElementaryTypeName","src":"9052:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":614,"nodeType":"ArrayTypeName","src":"9052:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":618,"mutability":"mutable","name":"leaves","nameLocation":"9103:6:4","nodeType":"VariableDeclaration","scope":766,"src":"9086:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":616,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9086:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":617,"nodeType":"ArrayTypeName","src":"9086:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"9010:105:4"},"returnParameters":{"id":622,"nodeType":"ParameterList","parameters":[{"constant":false,"id":621,"mutability":"mutable","name":"merkleRoot","nameLocation":"9147:10:4","nodeType":"VariableDeclaration","scope":766,"src":"9139:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":620,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9139:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9138:20:4"},"scope":1359,"src":"8984:2279:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":802,"nodeType":"Block","src":"12112:84:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":794,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"12147:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":795,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":773,"src":"12154:10:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},{"id":796,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":778,"src":"12166:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":797,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":788,"src":"12174:6:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}],"id":793,"name":"processMultiProof","nodeType":"Identifier","overloadedDeclarations":[766,970],"referencedDeclaration":970,"src":"12129:17:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bool[] memory,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"}},"id":798,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12129:52:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":799,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":775,"src":"12185:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"12129:60:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":792,"id":801,"nodeType":"Return","src":"12122:67:4"}]},"documentation":{"id":767,"nodeType":"StructuredDocumentation","src":"11269:590:4","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in memory with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProof}."},"id":803,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerify","nameLocation":"11873:16:4","nodeType":"FunctionDefinition","parameters":{"id":789,"nodeType":"ParameterList","parameters":[{"constant":false,"id":770,"mutability":"mutable","name":"proof","nameLocation":"11916:5:4","nodeType":"VariableDeclaration","scope":803,"src":"11899:22:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":768,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11899:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":769,"nodeType":"ArrayTypeName","src":"11899:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":773,"mutability":"mutable","name":"proofFlags","nameLocation":"11945:10:4","nodeType":"VariableDeclaration","scope":803,"src":"11931:24:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":771,"name":"bool","nodeType":"ElementaryTypeName","src":"11931:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":772,"nodeType":"ArrayTypeName","src":"11931:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":775,"mutability":"mutable","name":"root","nameLocation":"11973:4:4","nodeType":"VariableDeclaration","scope":803,"src":"11965:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":774,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11965:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":778,"mutability":"mutable","name":"leaves","nameLocation":"12004:6:4","nodeType":"VariableDeclaration","scope":803,"src":"11987:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":776,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11987:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":777,"nodeType":"ArrayTypeName","src":"11987:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":788,"mutability":"mutable","name":"hasher","nameLocation":"12070:6:4","nodeType":"VariableDeclaration","scope":803,"src":"12020:56:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":787,"nodeType":"FunctionTypeName","parameterTypes":{"id":783,"nodeType":"ParameterList","parameters":[{"constant":false,"id":780,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":787,"src":"12029:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":779,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12029:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":782,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":787,"src":"12038:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":781,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12038:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"12028:18:4"},"returnParameterTypes":{"id":786,"nodeType":"ParameterList","parameters":[{"constant":false,"id":785,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":787,"src":"12061:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":784,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12061:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"12060:9:4"},"src":"12020:56:4","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"11889:193:4"},"returnParameters":{"id":792,"nodeType":"ParameterList","parameters":[{"constant":false,"id":791,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":803,"src":"12106:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":790,"name":"bool","nodeType":"ElementaryTypeName","src":"12106:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"12105:6:4"},"scope":1359,"src":"11864:332:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":969,"nodeType":"Block","src":"13545:2083:4","statements":[{"assignments":[829],"declarations":[{"constant":false,"id":829,"mutability":"mutable","name":"leavesLen","nameLocation":"13937:9:4","nodeType":"VariableDeclaration","scope":969,"src":"13929:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":828,"name":"uint256","nodeType":"ElementaryTypeName","src":"13929:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":832,"initialValue":{"expression":{"id":830,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":813,"src":"13949:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13956:6:4","memberName":"length","nodeType":"MemberAccess","src":"13949:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13929:33:4"},{"assignments":[834],"declarations":[{"constant":false,"id":834,"mutability":"mutable","name":"proofFlagsLen","nameLocation":"13980:13:4","nodeType":"VariableDeclaration","scope":969,"src":"13972:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":833,"name":"uint256","nodeType":"ElementaryTypeName","src":"13972:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":837,"initialValue":{"expression":{"id":835,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":810,"src":"13996:10:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14007:6:4","memberName":"length","nodeType":"MemberAccess","src":"13996:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13972:41:4"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":838,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":829,"src":"14061:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":839,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":807,"src":"14073:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14079:6:4","memberName":"length","nodeType":"MemberAccess","src":"14073:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14061:24:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":842,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"14089:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":843,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14105:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"14089:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14061:45:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":850,"nodeType":"IfStatement","src":"14057:113:4","trueBody":{"id":849,"nodeType":"Block","src":"14108:62:4","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":846,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":294,"src":"14129:28:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":847,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14129:30:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":848,"nodeType":"RevertStatement","src":"14122:37:4"}]}},{"assignments":[855],"declarations":[{"constant":false,"id":855,"mutability":"mutable","name":"hashes","nameLocation":"14431:6:4","nodeType":"VariableDeclaration","scope":969,"src":"14414:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":853,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14414:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":854,"nodeType":"ArrayTypeName","src":"14414:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":861,"initialValue":{"arguments":[{"id":859,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"14454:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":858,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"14440:13:4","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":856,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14444:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":857,"nodeType":"ArrayTypeName","src":"14444:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":860,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14440:28:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"14414:54:4"},{"assignments":[863],"declarations":[{"constant":false,"id":863,"mutability":"mutable","name":"leafPos","nameLocation":"14486:7:4","nodeType":"VariableDeclaration","scope":969,"src":"14478:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":862,"name":"uint256","nodeType":"ElementaryTypeName","src":"14478:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":865,"initialValue":{"hexValue":"30","id":864,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14496:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"14478:19:4"},{"assignments":[867],"declarations":[{"constant":false,"id":867,"mutability":"mutable","name":"hashPos","nameLocation":"14515:7:4","nodeType":"VariableDeclaration","scope":969,"src":"14507:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":866,"name":"uint256","nodeType":"ElementaryTypeName","src":"14507:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":869,"initialValue":{"hexValue":"30","id":868,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14525:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"14507:19:4"},{"assignments":[871],"declarations":[{"constant":false,"id":871,"mutability":"mutable","name":"proofPos","nameLocation":"14544:8:4","nodeType":"VariableDeclaration","scope":969,"src":"14536:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":870,"name":"uint256","nodeType":"ElementaryTypeName","src":"14536:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":873,"initialValue":{"hexValue":"30","id":872,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14555:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"14536:20:4"},{"body":{"id":932,"nodeType":"Block","src":"14976:289:4","statements":[{"assignments":[885],"declarations":[{"constant":false,"id":885,"mutability":"mutable","name":"a","nameLocation":"14998:1:4","nodeType":"VariableDeclaration","scope":932,"src":"14990:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":884,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14990:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":898,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":888,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":886,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":863,"src":"15002:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":887,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":829,"src":"15012:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15002:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":893,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":855,"src":"15044:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":896,"indexExpression":{"id":895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15051:9:4","subExpression":{"id":894,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":867,"src":"15051:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15044:17:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"15002:59:4","trueExpression":{"baseExpression":{"id":889,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":813,"src":"15024:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":892,"indexExpression":{"id":891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15031:9:4","subExpression":{"id":890,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":863,"src":"15031:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15024:17:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"14990:71:4"},{"assignments":[900],"declarations":[{"constant":false,"id":900,"mutability":"mutable","name":"b","nameLocation":"15083:1:4","nodeType":"VariableDeclaration","scope":932,"src":"15075:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":899,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15075:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":922,"initialValue":{"condition":{"baseExpression":{"id":901,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":810,"src":"15087:10:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":903,"indexExpression":{"id":902,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":875,"src":"15098:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15087:13:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":917,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":807,"src":"15199:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":920,"indexExpression":{"id":919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15205:10:4","subExpression":{"id":918,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":871,"src":"15205:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15199:17:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"15087:129:4","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":904,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":863,"src":"15120:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":905,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":829,"src":"15130:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15120:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":911,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":855,"src":"15162:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":914,"indexExpression":{"id":913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15169:9:4","subExpression":{"id":912,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":867,"src":"15169:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15162:17:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"15120:59:4","trueExpression":{"baseExpression":{"id":907,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":813,"src":"15142:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":910,"indexExpression":{"id":909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15149:9:4","subExpression":{"id":908,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":863,"src":"15149:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15142:17:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":916,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"15119:61:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"15075:141:4"},{"expression":{"id":930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":923,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":855,"src":"15230:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":925,"indexExpression":{"id":924,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":875,"src":"15237:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15230:9:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":927,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":885,"src":"15249:1:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":928,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":900,"src":"15252:1:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":926,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":823,"src":"15242:6:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}},"id":929,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15242:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"15230:24:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":931,"nodeType":"ExpressionStatement","src":"15230:24:4"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":878,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":875,"src":"14952:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":879,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"14956:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14952:17:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":933,"initializationExpression":{"assignments":[875],"declarations":[{"constant":false,"id":875,"mutability":"mutable","name":"i","nameLocation":"14945:1:4","nodeType":"VariableDeclaration","scope":933,"src":"14937:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":874,"name":"uint256","nodeType":"ElementaryTypeName","src":"14937:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":877,"initialValue":{"hexValue":"30","id":876,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14949:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"14937:13:4"},"loopExpression":{"expression":{"id":882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"14971:3:4","subExpression":{"id":881,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":875,"src":"14971:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":883,"nodeType":"ExpressionStatement","src":"14971:3:4"},"nodeType":"ForStatement","src":"14932:333:4"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":934,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"15279:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":935,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15295:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"15279:17:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":954,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":829,"src":"15520:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":955,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15532:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"15520:13:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":966,"nodeType":"Block","src":"15582:40:4","statements":[{"expression":{"baseExpression":{"id":962,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":807,"src":"15603:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":964,"indexExpression":{"hexValue":"30","id":963,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15609:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15603:8:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":827,"id":965,"nodeType":"Return","src":"15596:15:4"}]},"id":967,"nodeType":"IfStatement","src":"15516:106:4","trueBody":{"id":961,"nodeType":"Block","src":"15535:41:4","statements":[{"expression":{"baseExpression":{"id":957,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":813,"src":"15556:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":959,"indexExpression":{"hexValue":"30","id":958,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15563:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15556:9:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":827,"id":960,"nodeType":"Return","src":"15549:16:4"}]}},"id":968,"nodeType":"IfStatement","src":"15275:347:4","trueBody":{"id":953,"nodeType":"Block","src":"15298:212:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":937,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":871,"src":"15316:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":938,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":807,"src":"15328:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":939,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15334:6:4","memberName":"length","nodeType":"MemberAccess","src":"15328:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15316:24:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":945,"nodeType":"IfStatement","src":"15312:100:4","trueBody":{"id":944,"nodeType":"Block","src":"15342:70:4","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":941,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":294,"src":"15367:28:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":942,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15367:30:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":943,"nodeType":"RevertStatement","src":"15360:37:4"}]}},{"id":952,"nodeType":"UncheckedBlock","src":"15425:75:4","statements":[{"expression":{"baseExpression":{"id":946,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":855,"src":"15460:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":950,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":947,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"15467:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":948,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15483:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15467:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15460:25:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":827,"id":951,"nodeType":"Return","src":"15453:32:4"}]}]}}]},"documentation":{"id":804,"nodeType":"StructuredDocumentation","src":"12202:1097:4","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in memory with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."},"id":970,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProof","nameLocation":"13313:17:4","nodeType":"FunctionDefinition","parameters":{"id":824,"nodeType":"ParameterList","parameters":[{"constant":false,"id":807,"mutability":"mutable","name":"proof","nameLocation":"13357:5:4","nodeType":"VariableDeclaration","scope":970,"src":"13340:22:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":805,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13340:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":806,"nodeType":"ArrayTypeName","src":"13340:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":810,"mutability":"mutable","name":"proofFlags","nameLocation":"13386:10:4","nodeType":"VariableDeclaration","scope":970,"src":"13372:24:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":808,"name":"bool","nodeType":"ElementaryTypeName","src":"13372:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":809,"nodeType":"ArrayTypeName","src":"13372:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":813,"mutability":"mutable","name":"leaves","nameLocation":"13423:6:4","nodeType":"VariableDeclaration","scope":970,"src":"13406:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":811,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13406:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":812,"nodeType":"ArrayTypeName","src":"13406:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":823,"mutability":"mutable","name":"hasher","nameLocation":"13489:6:4","nodeType":"VariableDeclaration","scope":970,"src":"13439:56:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":822,"nodeType":"FunctionTypeName","parameterTypes":{"id":818,"nodeType":"ParameterList","parameters":[{"constant":false,"id":815,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":822,"src":"13448:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":814,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13448:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":817,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":822,"src":"13457:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":816,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13457:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"13447:18:4"},"returnParameterTypes":{"id":821,"nodeType":"ParameterList","parameters":[{"constant":false,"id":820,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":822,"src":"13480:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":819,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13480:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"13479:9:4"},"src":"13439:56:4","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"13330:171:4"},"returnParameters":{"id":827,"nodeType":"ParameterList","parameters":[{"constant":false,"id":826,"mutability":"mutable","name":"merkleRoot","nameLocation":"13533:10:4","nodeType":"VariableDeclaration","scope":970,"src":"13525:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":825,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13525:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"13524:20:4"},"scope":1359,"src":"13304:2324:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":995,"nodeType":"Block","src":"16436:84:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":993,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":988,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":974,"src":"16479:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":989,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"16486:10:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},{"id":990,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":982,"src":"16498:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":987,"name":"processMultiProofCalldata","nodeType":"Identifier","overloadedDeclarations":[1154,1358],"referencedDeclaration":1154,"src":"16453:25:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bool[] calldata,bytes32[] memory) pure returns (bytes32)"}},"id":991,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16453:52:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":992,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":979,"src":"16509:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"16453:60:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":986,"id":994,"nodeType":"Return","src":"16446:67:4"}]},"documentation":{"id":971,"nodeType":"StructuredDocumentation","src":"15634:603:4","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in calldata with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProofCalldata}."},"id":996,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerifyCalldata","nameLocation":"16251:24:4","nodeType":"FunctionDefinition","parameters":{"id":983,"nodeType":"ParameterList","parameters":[{"constant":false,"id":974,"mutability":"mutable","name":"proof","nameLocation":"16304:5:4","nodeType":"VariableDeclaration","scope":996,"src":"16285:24:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":972,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16285:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":973,"nodeType":"ArrayTypeName","src":"16285:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":977,"mutability":"mutable","name":"proofFlags","nameLocation":"16335:10:4","nodeType":"VariableDeclaration","scope":996,"src":"16319:26:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":975,"name":"bool","nodeType":"ElementaryTypeName","src":"16319:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":976,"nodeType":"ArrayTypeName","src":"16319:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":979,"mutability":"mutable","name":"root","nameLocation":"16363:4:4","nodeType":"VariableDeclaration","scope":996,"src":"16355:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":978,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16355:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":982,"mutability":"mutable","name":"leaves","nameLocation":"16394:6:4","nodeType":"VariableDeclaration","scope":996,"src":"16377:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":980,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16377:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":981,"nodeType":"ArrayTypeName","src":"16377:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"16275:131:4"},"returnParameters":{"id":986,"nodeType":"ParameterList","parameters":[{"constant":false,"id":985,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":996,"src":"16430:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":984,"name":"bool","nodeType":"ElementaryTypeName","src":"16430:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"16429:6:4"},"scope":1359,"src":"16242:278:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1153,"nodeType":"Block","src":"17820:2104:4","statements":[{"assignments":[1012],"declarations":[{"constant":false,"id":1012,"mutability":"mutable","name":"leavesLen","nameLocation":"18212:9:4","nodeType":"VariableDeclaration","scope":1153,"src":"18204:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1011,"name":"uint256","nodeType":"ElementaryTypeName","src":"18204:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1015,"initialValue":{"expression":{"id":1013,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1006,"src":"18224:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18231:6:4","memberName":"length","nodeType":"MemberAccess","src":"18224:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"18204:33:4"},{"assignments":[1017],"declarations":[{"constant":false,"id":1017,"mutability":"mutable","name":"proofFlagsLen","nameLocation":"18255:13:4","nodeType":"VariableDeclaration","scope":1153,"src":"18247:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1016,"name":"uint256","nodeType":"ElementaryTypeName","src":"18247:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1020,"initialValue":{"expression":{"id":1018,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"18271:10:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":1019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18282:6:4","memberName":"length","nodeType":"MemberAccess","src":"18271:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"18247:41:4"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1024,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1021,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1012,"src":"18336:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":1022,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"18348:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18354:6:4","memberName":"length","nodeType":"MemberAccess","src":"18348:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18336:24:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1025,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1017,"src":"18364:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1026,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18380:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"18364:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18336:45:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1033,"nodeType":"IfStatement","src":"18332:113:4","trueBody":{"id":1032,"nodeType":"Block","src":"18383:62:4","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1029,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":294,"src":"18404:28:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1030,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18404:30:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1031,"nodeType":"RevertStatement","src":"18397:37:4"}]}},{"assignments":[1038],"declarations":[{"constant":false,"id":1038,"mutability":"mutable","name":"hashes","nameLocation":"18706:6:4","nodeType":"VariableDeclaration","scope":1153,"src":"18689:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1036,"name":"bytes32","nodeType":"ElementaryTypeName","src":"18689:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1037,"nodeType":"ArrayTypeName","src":"18689:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":1044,"initialValue":{"arguments":[{"id":1042,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1017,"src":"18729:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1041,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"18715:13:4","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":1039,"name":"bytes32","nodeType":"ElementaryTypeName","src":"18719:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1040,"nodeType":"ArrayTypeName","src":"18719:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":1043,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18715:28:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"18689:54:4"},{"assignments":[1046],"declarations":[{"constant":false,"id":1046,"mutability":"mutable","name":"leafPos","nameLocation":"18761:7:4","nodeType":"VariableDeclaration","scope":1153,"src":"18753:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1045,"name":"uint256","nodeType":"ElementaryTypeName","src":"18753:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1048,"initialValue":{"hexValue":"30","id":1047,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18771:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"18753:19:4"},{"assignments":[1050],"declarations":[{"constant":false,"id":1050,"mutability":"mutable","name":"hashPos","nameLocation":"18790:7:4","nodeType":"VariableDeclaration","scope":1153,"src":"18782:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1049,"name":"uint256","nodeType":"ElementaryTypeName","src":"18782:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1052,"initialValue":{"hexValue":"30","id":1051,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18800:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"18782:19:4"},{"assignments":[1054],"declarations":[{"constant":false,"id":1054,"mutability":"mutable","name":"proofPos","nameLocation":"18819:8:4","nodeType":"VariableDeclaration","scope":1153,"src":"18811:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1053,"name":"uint256","nodeType":"ElementaryTypeName","src":"18811:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1056,"initialValue":{"hexValue":"30","id":1055,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18830:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"18811:20:4"},{"body":{"id":1116,"nodeType":"Block","src":"19251:310:4","statements":[{"assignments":[1068],"declarations":[{"constant":false,"id":1068,"mutability":"mutable","name":"a","nameLocation":"19273:1:4","nodeType":"VariableDeclaration","scope":1116,"src":"19265:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1067,"name":"bytes32","nodeType":"ElementaryTypeName","src":"19265:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1081,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1069,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1046,"src":"19277:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1070,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1012,"src":"19287:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19277:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1076,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1038,"src":"19319:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1079,"indexExpression":{"id":1078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19326:9:4","subExpression":{"id":1077,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1050,"src":"19326:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19319:17:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"19277:59:4","trueExpression":{"baseExpression":{"id":1072,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1006,"src":"19299:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1075,"indexExpression":{"id":1074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19306:9:4","subExpression":{"id":1073,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1046,"src":"19306:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19299:17:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"19265:71:4"},{"assignments":[1083],"declarations":[{"constant":false,"id":1083,"mutability":"mutable","name":"b","nameLocation":"19358:1:4","nodeType":"VariableDeclaration","scope":1116,"src":"19350:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1082,"name":"bytes32","nodeType":"ElementaryTypeName","src":"19350:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1105,"initialValue":{"condition":{"baseExpression":{"id":1084,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"19362:10:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":1086,"indexExpression":{"id":1085,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1058,"src":"19373:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19362:13:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1100,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"19474:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1103,"indexExpression":{"id":1102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19480:10:4","subExpression":{"id":1101,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"19480:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19474:17:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"19362:129:4","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1087,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1046,"src":"19395:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1088,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1012,"src":"19405:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19395:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1094,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1038,"src":"19437:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1097,"indexExpression":{"id":1096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19444:9:4","subExpression":{"id":1095,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1050,"src":"19444:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19437:17:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"19395:59:4","trueExpression":{"baseExpression":{"id":1090,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1006,"src":"19417:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1093,"indexExpression":{"id":1092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19424:9:4","subExpression":{"id":1091,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1046,"src":"19424:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19417:17:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1099,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19394:61:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"19350:141:4"},{"expression":{"id":1114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1106,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1038,"src":"19505:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1108,"indexExpression":{"id":1107,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1058,"src":"19512:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"19505:9:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1111,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1068,"src":"19545:1:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1112,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1083,"src":"19548:1:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1109,"name":"Hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":286,"src":"19517:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Hashes_$286_$","typeString":"type(library Hashes)"}},"id":1110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19524:20:4","memberName":"commutativeKeccak256","nodeType":"MemberAccess","referencedDeclaration":273,"src":"19517:27:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1113,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19517:33:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"19505:45:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1115,"nodeType":"ExpressionStatement","src":"19505:45:4"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1061,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1058,"src":"19227:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1062,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1017,"src":"19231:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19227:17:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1117,"initializationExpression":{"assignments":[1058],"declarations":[{"constant":false,"id":1058,"mutability":"mutable","name":"i","nameLocation":"19220:1:4","nodeType":"VariableDeclaration","scope":1117,"src":"19212:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1057,"name":"uint256","nodeType":"ElementaryTypeName","src":"19212:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1060,"initialValue":{"hexValue":"30","id":1059,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19224:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"19212:13:4"},"loopExpression":{"expression":{"id":1065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19246:3:4","subExpression":{"id":1064,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1058,"src":"19246:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1066,"nodeType":"ExpressionStatement","src":"19246:3:4"},"nodeType":"ForStatement","src":"19207:354:4"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1120,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1118,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1017,"src":"19575:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1119,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19591:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"19575:17:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1138,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1012,"src":"19816:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1139,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19828:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"19816:13:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1150,"nodeType":"Block","src":"19878:40:4","statements":[{"expression":{"baseExpression":{"id":1146,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"19899:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1148,"indexExpression":{"hexValue":"30","id":1147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19905:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19899:8:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1010,"id":1149,"nodeType":"Return","src":"19892:15:4"}]},"id":1151,"nodeType":"IfStatement","src":"19812:106:4","trueBody":{"id":1145,"nodeType":"Block","src":"19831:41:4","statements":[{"expression":{"baseExpression":{"id":1141,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1006,"src":"19852:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1143,"indexExpression":{"hexValue":"30","id":1142,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19859:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19852:9:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1010,"id":1144,"nodeType":"Return","src":"19845:16:4"}]}},"id":1152,"nodeType":"IfStatement","src":"19571:347:4","trueBody":{"id":1137,"nodeType":"Block","src":"19594:212:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1121,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"19612:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1122,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"19624:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19630:6:4","memberName":"length","nodeType":"MemberAccess","src":"19624:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19612:24:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1129,"nodeType":"IfStatement","src":"19608:100:4","trueBody":{"id":1128,"nodeType":"Block","src":"19638:70:4","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1125,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":294,"src":"19663:28:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1126,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19663:30:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1127,"nodeType":"RevertStatement","src":"19656:37:4"}]}},{"id":1136,"nodeType":"UncheckedBlock","src":"19721:75:4","statements":[{"expression":{"baseExpression":{"id":1130,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1038,"src":"19756:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1134,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1131,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1017,"src":"19763:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1132,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19779:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"19763:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19756:25:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1010,"id":1135,"nodeType":"Return","src":"19749:32:4"}]}]}}]},"documentation":{"id":997,"nodeType":"StructuredDocumentation","src":"16526:1102:4","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in calldata with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."},"id":1154,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProofCalldata","nameLocation":"17642:25:4","nodeType":"FunctionDefinition","parameters":{"id":1007,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1000,"mutability":"mutable","name":"proof","nameLocation":"17696:5:4","nodeType":"VariableDeclaration","scope":1154,"src":"17677:24:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":998,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17677:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":999,"nodeType":"ArrayTypeName","src":"17677:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1003,"mutability":"mutable","name":"proofFlags","nameLocation":"17727:10:4","nodeType":"VariableDeclaration","scope":1154,"src":"17711:26:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1001,"name":"bool","nodeType":"ElementaryTypeName","src":"17711:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1002,"nodeType":"ArrayTypeName","src":"17711:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1006,"mutability":"mutable","name":"leaves","nameLocation":"17764:6:4","nodeType":"VariableDeclaration","scope":1154,"src":"17747:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1004,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17747:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1005,"nodeType":"ArrayTypeName","src":"17747:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"17667:109:4"},"returnParameters":{"id":1010,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1009,"mutability":"mutable","name":"merkleRoot","nameLocation":"17808:10:4","nodeType":"VariableDeclaration","scope":1154,"src":"17800:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1008,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17800:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"17799:20:4"},"scope":1359,"src":"17633:2291:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1190,"nodeType":"Block","src":"20795:92:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1182,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1158,"src":"20838:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":1183,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1161,"src":"20845:10:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},{"id":1184,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1166,"src":"20857:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":1185,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1176,"src":"20865:6:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}],"id":1181,"name":"processMultiProofCalldata","nodeType":"Identifier","overloadedDeclarations":[1154,1358],"referencedDeclaration":1358,"src":"20812:25:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bool[] calldata,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"}},"id":1186,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20812:60:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1187,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1163,"src":"20876:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"20812:68:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1180,"id":1189,"nodeType":"Return","src":"20805:75:4"}]},"documentation":{"id":1155,"nodeType":"StructuredDocumentation","src":"19930:600:4","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in calldata with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProofCalldata}."},"id":1191,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerifyCalldata","nameLocation":"20544:24:4","nodeType":"FunctionDefinition","parameters":{"id":1177,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1158,"mutability":"mutable","name":"proof","nameLocation":"20597:5:4","nodeType":"VariableDeclaration","scope":1191,"src":"20578:24:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1156,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20578:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1157,"nodeType":"ArrayTypeName","src":"20578:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1161,"mutability":"mutable","name":"proofFlags","nameLocation":"20628:10:4","nodeType":"VariableDeclaration","scope":1191,"src":"20612:26:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1159,"name":"bool","nodeType":"ElementaryTypeName","src":"20612:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1160,"nodeType":"ArrayTypeName","src":"20612:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1163,"mutability":"mutable","name":"root","nameLocation":"20656:4:4","nodeType":"VariableDeclaration","scope":1191,"src":"20648:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1162,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20648:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1166,"mutability":"mutable","name":"leaves","nameLocation":"20687:6:4","nodeType":"VariableDeclaration","scope":1191,"src":"20670:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1164,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20670:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1165,"nodeType":"ArrayTypeName","src":"20670:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1176,"mutability":"mutable","name":"hasher","nameLocation":"20753:6:4","nodeType":"VariableDeclaration","scope":1191,"src":"20703:56:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":1175,"nodeType":"FunctionTypeName","parameterTypes":{"id":1171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1168,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1175,"src":"20712:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1167,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20712:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1170,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1175,"src":"20721:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1169,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20721:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"20711:18:4"},"returnParameterTypes":{"id":1174,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1173,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1175,"src":"20744:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1172,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20744:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"20743:9:4"},"src":"20703:56:4","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"20568:197:4"},"returnParameters":{"id":1180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1179,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1191,"src":"20789:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1178,"name":"bool","nodeType":"ElementaryTypeName","src":"20789:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"20788:6:4"},"scope":1359,"src":"20535:352:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1357,"nodeType":"Block","src":"22250:2083:4","statements":[{"assignments":[1217],"declarations":[{"constant":false,"id":1217,"mutability":"mutable","name":"leavesLen","nameLocation":"22642:9:4","nodeType":"VariableDeclaration","scope":1357,"src":"22634:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1216,"name":"uint256","nodeType":"ElementaryTypeName","src":"22634:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1220,"initialValue":{"expression":{"id":1218,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1201,"src":"22654:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22661:6:4","memberName":"length","nodeType":"MemberAccess","src":"22654:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"22634:33:4"},{"assignments":[1222],"declarations":[{"constant":false,"id":1222,"mutability":"mutable","name":"proofFlagsLen","nameLocation":"22685:13:4","nodeType":"VariableDeclaration","scope":1357,"src":"22677:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1221,"name":"uint256","nodeType":"ElementaryTypeName","src":"22677:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1225,"initialValue":{"expression":{"id":1223,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1198,"src":"22701:10:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":1224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22712:6:4","memberName":"length","nodeType":"MemberAccess","src":"22701:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"22677:41:4"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1226,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1217,"src":"22766:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":1227,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"22778:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22784:6:4","memberName":"length","nodeType":"MemberAccess","src":"22778:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22766:24:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1230,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1222,"src":"22794:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1231,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22810:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"22794:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22766:45:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1238,"nodeType":"IfStatement","src":"22762:113:4","trueBody":{"id":1237,"nodeType":"Block","src":"22813:62:4","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1234,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":294,"src":"22834:28:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22834:30:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1236,"nodeType":"RevertStatement","src":"22827:37:4"}]}},{"assignments":[1243],"declarations":[{"constant":false,"id":1243,"mutability":"mutable","name":"hashes","nameLocation":"23136:6:4","nodeType":"VariableDeclaration","scope":1357,"src":"23119:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1241,"name":"bytes32","nodeType":"ElementaryTypeName","src":"23119:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1242,"nodeType":"ArrayTypeName","src":"23119:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":1249,"initialValue":{"arguments":[{"id":1247,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1222,"src":"23159:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1246,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"23145:13:4","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":1244,"name":"bytes32","nodeType":"ElementaryTypeName","src":"23149:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1245,"nodeType":"ArrayTypeName","src":"23149:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":1248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23145:28:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"23119:54:4"},{"assignments":[1251],"declarations":[{"constant":false,"id":1251,"mutability":"mutable","name":"leafPos","nameLocation":"23191:7:4","nodeType":"VariableDeclaration","scope":1357,"src":"23183:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1250,"name":"uint256","nodeType":"ElementaryTypeName","src":"23183:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1253,"initialValue":{"hexValue":"30","id":1252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23201:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"23183:19:4"},{"assignments":[1255],"declarations":[{"constant":false,"id":1255,"mutability":"mutable","name":"hashPos","nameLocation":"23220:7:4","nodeType":"VariableDeclaration","scope":1357,"src":"23212:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1254,"name":"uint256","nodeType":"ElementaryTypeName","src":"23212:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1257,"initialValue":{"hexValue":"30","id":1256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23230:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"23212:19:4"},{"assignments":[1259],"declarations":[{"constant":false,"id":1259,"mutability":"mutable","name":"proofPos","nameLocation":"23249:8:4","nodeType":"VariableDeclaration","scope":1357,"src":"23241:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1258,"name":"uint256","nodeType":"ElementaryTypeName","src":"23241:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1261,"initialValue":{"hexValue":"30","id":1260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23260:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"23241:20:4"},{"body":{"id":1320,"nodeType":"Block","src":"23681:289:4","statements":[{"assignments":[1273],"declarations":[{"constant":false,"id":1273,"mutability":"mutable","name":"a","nameLocation":"23703:1:4","nodeType":"VariableDeclaration","scope":1320,"src":"23695:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1272,"name":"bytes32","nodeType":"ElementaryTypeName","src":"23695:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1286,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1274,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1251,"src":"23707:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1275,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1217,"src":"23717:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23707:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1281,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1243,"src":"23749:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1284,"indexExpression":{"id":1283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23756:9:4","subExpression":{"id":1282,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"23756:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23749:17:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"23707:59:4","trueExpression":{"baseExpression":{"id":1277,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1201,"src":"23729:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1280,"indexExpression":{"id":1279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23736:9:4","subExpression":{"id":1278,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1251,"src":"23736:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23729:17:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"23695:71:4"},{"assignments":[1288],"declarations":[{"constant":false,"id":1288,"mutability":"mutable","name":"b","nameLocation":"23788:1:4","nodeType":"VariableDeclaration","scope":1320,"src":"23780:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1287,"name":"bytes32","nodeType":"ElementaryTypeName","src":"23780:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1310,"initialValue":{"condition":{"baseExpression":{"id":1289,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1198,"src":"23792:10:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":1291,"indexExpression":{"id":1290,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1263,"src":"23803:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23792:13:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1305,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"23904:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1308,"indexExpression":{"id":1307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23910:10:4","subExpression":{"id":1306,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1259,"src":"23910:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23904:17:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"23792:129:4","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1292,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1251,"src":"23825:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1293,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1217,"src":"23835:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23825:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1299,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1243,"src":"23867:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1302,"indexExpression":{"id":1301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23874:9:4","subExpression":{"id":1300,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"23874:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23867:17:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"23825:59:4","trueExpression":{"baseExpression":{"id":1295,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1201,"src":"23847:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1298,"indexExpression":{"id":1297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23854:9:4","subExpression":{"id":1296,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1251,"src":"23854:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23847:17:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1304,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"23824:61:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"23780:141:4"},{"expression":{"id":1318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1311,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1243,"src":"23935:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1313,"indexExpression":{"id":1312,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1263,"src":"23942:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"23935:9:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1315,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1273,"src":"23954:1:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1316,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1288,"src":"23957:1:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1314,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1211,"src":"23947:6:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}},"id":1317,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23947:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"23935:24:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1319,"nodeType":"ExpressionStatement","src":"23935:24:4"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1266,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1263,"src":"23657:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1267,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1222,"src":"23661:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23657:17:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1321,"initializationExpression":{"assignments":[1263],"declarations":[{"constant":false,"id":1263,"mutability":"mutable","name":"i","nameLocation":"23650:1:4","nodeType":"VariableDeclaration","scope":1321,"src":"23642:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1262,"name":"uint256","nodeType":"ElementaryTypeName","src":"23642:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1265,"initialValue":{"hexValue":"30","id":1264,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23654:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"23642:13:4"},"loopExpression":{"expression":{"id":1270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23676:3:4","subExpression":{"id":1269,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1263,"src":"23676:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1271,"nodeType":"ExpressionStatement","src":"23676:3:4"},"nodeType":"ForStatement","src":"23637:333:4"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1322,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1222,"src":"23984:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1323,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24000:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"23984:17:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1342,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1217,"src":"24225:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1343,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24237:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"24225:13:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1354,"nodeType":"Block","src":"24287:40:4","statements":[{"expression":{"baseExpression":{"id":1350,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"24308:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1352,"indexExpression":{"hexValue":"30","id":1351,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24314:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24308:8:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1215,"id":1353,"nodeType":"Return","src":"24301:15:4"}]},"id":1355,"nodeType":"IfStatement","src":"24221:106:4","trueBody":{"id":1349,"nodeType":"Block","src":"24240:41:4","statements":[{"expression":{"baseExpression":{"id":1345,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1201,"src":"24261:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1347,"indexExpression":{"hexValue":"30","id":1346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24268:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24261:9:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1215,"id":1348,"nodeType":"Return","src":"24254:16:4"}]}},"id":1356,"nodeType":"IfStatement","src":"23980:347:4","trueBody":{"id":1341,"nodeType":"Block","src":"24003:212:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1325,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1259,"src":"24021:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1326,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"24033:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"24039:6:4","memberName":"length","nodeType":"MemberAccess","src":"24033:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24021:24:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1333,"nodeType":"IfStatement","src":"24017:100:4","trueBody":{"id":1332,"nodeType":"Block","src":"24047:70:4","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1329,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":294,"src":"24072:28:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1330,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24072:30:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1331,"nodeType":"RevertStatement","src":"24065:37:4"}]}},{"id":1340,"nodeType":"UncheckedBlock","src":"24130:75:4","statements":[{"expression":{"baseExpression":{"id":1334,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1243,"src":"24165:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1338,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1335,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1222,"src":"24172:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1336,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24188:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"24172:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24165:25:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1215,"id":1339,"nodeType":"Return","src":"24158:32:4"}]}]}}]},"documentation":{"id":1192,"nodeType":"StructuredDocumentation","src":"20893:1099:4","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in calldata with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."},"id":1358,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProofCalldata","nameLocation":"22006:25:4","nodeType":"FunctionDefinition","parameters":{"id":1212,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1195,"mutability":"mutable","name":"proof","nameLocation":"22060:5:4","nodeType":"VariableDeclaration","scope":1358,"src":"22041:24:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1193,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22041:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1194,"nodeType":"ArrayTypeName","src":"22041:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1198,"mutability":"mutable","name":"proofFlags","nameLocation":"22091:10:4","nodeType":"VariableDeclaration","scope":1358,"src":"22075:26:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1196,"name":"bool","nodeType":"ElementaryTypeName","src":"22075:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1197,"nodeType":"ArrayTypeName","src":"22075:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1201,"mutability":"mutable","name":"leaves","nameLocation":"22128:6:4","nodeType":"VariableDeclaration","scope":1358,"src":"22111:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1199,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22111:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1200,"nodeType":"ArrayTypeName","src":"22111:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1211,"mutability":"mutable","name":"hasher","nameLocation":"22194:6:4","nodeType":"VariableDeclaration","scope":1358,"src":"22144:56:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":1210,"nodeType":"FunctionTypeName","parameterTypes":{"id":1206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1203,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1210,"src":"22153:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1202,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22153:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1205,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1210,"src":"22162:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1204,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22162:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"22152:18:4"},"returnParameterTypes":{"id":1209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1208,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1210,"src":"22185:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1207,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22185:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"22184:9:4"},"src":"22144:56:4","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"22031:175:4"},"returnParameters":{"id":1215,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1214,"mutability":"mutable","name":"merkleRoot","nameLocation":"22238:10:4","nodeType":"VariableDeclaration","scope":1358,"src":"22230:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1213,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22230:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"22229:20:4"},"scope":1359,"src":"21997:2336:4","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":1360,"src":"1353:22982:4","usedErrors":[294],"usedEvents":[]}],"src":"206:24130:4"},"id":4},"contracts/MemeRewards.sol":{"ast":{"absolutePath":"contracts/MemeRewards.sol","exportedSymbols":{"Context":[177],"Hashes":[286],"MemeRewards":[1685],"MerkleProof":[1359],"Ownable":[147],"ReentrancyGuard":[246]},"id":1686,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1361,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:5"},{"absolutePath":"@openzeppelin/contracts/utils/ReentrancyGuard.sol","file":"@openzeppelin/contracts/utils/ReentrancyGuard.sol","id":1362,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1686,"sourceUnit":247,"src":"58:59:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":1363,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1686,"sourceUnit":148,"src":"118:52:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","file":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","id":1364,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1686,"sourceUnit":1360,"src":"171:68:5","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1366,"name":"ReentrancyGuard","nameLocations":["379:15:5"],"nodeType":"IdentifierPath","referencedDeclaration":246,"src":"379:15:5"},"id":1367,"nodeType":"InheritanceSpecifier","src":"379:15:5"},{"baseName":{"id":1368,"name":"Ownable","nameLocations":["396:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"396:7:5"},"id":1369,"nodeType":"InheritanceSpecifier","src":"396:7:5"}],"canonicalName":"MemeRewards","contractDependencies":[],"contractKind":"contract","documentation":{"id":1365,"nodeType":"StructuredDocumentation","src":"241:113:5","text":" @title MemeRewards\n @dev Manages ETH rewards for meme creators with batch claiming via Merkle proofs"},"fullyImplemented":true,"id":1685,"linearizedBaseContracts":[1685,147,177,246],"name":"MemeRewards","nameLocation":"364:11:5","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"95646fd9","id":1372,"mutability":"mutable","name":"rewardPerLike","nameLocation":"464:13:5","nodeType":"VariableDeclaration","scope":1685,"src":"449:42:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1370,"name":"uint256","nodeType":"ElementaryTypeName","src":"449:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"302e303031","id":1371,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"480:11:5","subdenomination":"ether","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000_by_1","typeString":"int_const 1000000000000000"},"value":"0.001"},"visibility":"public"},{"constant":false,"functionSelector":"2eb4a7ab","id":1374,"mutability":"mutable","name":"merkleRoot","nameLocation":"553:10:5","nodeType":"VariableDeclaration","scope":1685,"src":"538:25:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1373,"name":"bytes32","nodeType":"ElementaryTypeName","src":"538:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":false,"functionSelector":"bd834345","id":1378,"mutability":"mutable","name":"claimedRewards","nameLocation":"665:14:5","nodeType":"VariableDeclaration","scope":1685,"src":"630:49:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":1377,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1375,"name":"address","nodeType":"ElementaryTypeName","src":"638:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"630:27:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1376,"name":"uint256","nodeType":"ElementaryTypeName","src":"649:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"functionSelector":"31d7a262","id":1382,"mutability":"mutable","name":"pendingRewards","nameLocation":"778:14:5","nodeType":"VariableDeclaration","scope":1685,"src":"743:49:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":1381,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1379,"name":"address","nodeType":"ElementaryTypeName","src":"751:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"743:27:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1380,"name":"uint256","nodeType":"ElementaryTypeName","src":"762:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"anonymous":false,"eventSelector":"eafb9fc200c0649f201654890c7c9185964f2f4ff66727753763452c51bd9286","id":1390,"name":"LikeRewardDeposited","nameLocation":"823:19:5","nodeType":"EventDefinition","parameters":{"id":1389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1384,"indexed":true,"mutability":"mutable","name":"creator","nameLocation":"859:7:5","nodeType":"VariableDeclaration","scope":1390,"src":"843:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1383,"name":"address","nodeType":"ElementaryTypeName","src":"843:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1386,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"876:6:5","nodeType":"VariableDeclaration","scope":1390,"src":"868:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1385,"name":"uint256","nodeType":"ElementaryTypeName","src":"868:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1388,"indexed":false,"mutability":"mutable","name":"memeId","nameLocation":"892:6:5","nodeType":"VariableDeclaration","scope":1390,"src":"884:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1387,"name":"uint256","nodeType":"ElementaryTypeName","src":"884:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"842:57:5"},"src":"817:83:5"},{"anonymous":false,"eventSelector":"fc30cddea38e2bf4d6ea7d3f9ed3b6ad7f176419f4963bd81318067a4aee73fe","id":1396,"name":"RewardsClaimed","nameLocation":"911:14:5","nodeType":"EventDefinition","parameters":{"id":1395,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1392,"indexed":true,"mutability":"mutable","name":"creator","nameLocation":"942:7:5","nodeType":"VariableDeclaration","scope":1396,"src":"926:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1391,"name":"address","nodeType":"ElementaryTypeName","src":"926:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1394,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"959:6:5","nodeType":"VariableDeclaration","scope":1396,"src":"951:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1393,"name":"uint256","nodeType":"ElementaryTypeName","src":"951:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"925:41:5"},"src":"905:62:5"},{"anonymous":false,"eventSelector":"90004c04698bc3322499a575ed3752dd4abf33e0a7294c06a787a0fe01bea941","id":1400,"name":"MerkleRootUpdated","nameLocation":"978:17:5","nodeType":"EventDefinition","parameters":{"id":1399,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1398,"indexed":false,"mutability":"mutable","name":"newRoot","nameLocation":"1004:7:5","nodeType":"VariableDeclaration","scope":1400,"src":"996:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1397,"name":"bytes32","nodeType":"ElementaryTypeName","src":"996:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"995:17:5"},"src":"972:41:5"},{"anonymous":false,"eventSelector":"e7fca20a845ccc07535ff95293a502f93dbf8a1106113e56257e692a09045111","id":1404,"name":"RewardPerLikeUpdated","nameLocation":"1024:20:5","nodeType":"EventDefinition","parameters":{"id":1403,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1402,"indexed":false,"mutability":"mutable","name":"newAmount","nameLocation":"1053:9:5","nodeType":"VariableDeclaration","scope":1404,"src":"1045:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1401,"name":"uint256","nodeType":"ElementaryTypeName","src":"1045:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1044:19:5"},"src":"1018:46:5"},{"body":{"id":1411,"nodeType":"Block","src":"1108:2:5","statements":[]},"id":1412,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"expression":{"id":1407,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1096:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1100:6:5","memberName":"sender","nodeType":"MemberAccess","src":"1096:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":1409,"kind":"baseConstructorSpecifier","modifierName":{"id":1406,"name":"Ownable","nameLocations":["1088:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"1088:7:5"},"nodeType":"ModifierInvocation","src":"1088:19:5"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1405,"nodeType":"ParameterList","parameters":[],"src":"1085:2:5"},"returnParameters":{"id":1410,"nodeType":"ParameterList","parameters":[],"src":"1108:0:5"},"scope":1685,"src":"1074:36:5","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1452,"nodeType":"Block","src":"1349:275:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1421,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1367:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1371:5:5","memberName":"value","nodeType":"MemberAccess","src":"1367:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1423,"name":"rewardPerLike","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1372,"src":"1380:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1367:26:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e73756666696369656e742072657761726420616d6f756e74","id":1425,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1395:28:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_5a70a1957d0bc5746a316d65d79c814e231a04b6179c4c7790fdd52fe086f25c","typeString":"literal_string \"Insufficient reward amount\""},"value":"Insufficient reward amount"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5a70a1957d0bc5746a316d65d79c814e231a04b6179c4c7790fdd52fe086f25c","typeString":"literal_string \"Insufficient reward amount\""}],"id":1420,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1359:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1426,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1359:65:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1427,"nodeType":"ExpressionStatement","src":"1359:65:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1429,"name":"creator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1415,"src":"1442:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1432,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1461:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1431,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1453:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1430,"name":"address","nodeType":"ElementaryTypeName","src":"1453:7:5","typeDescriptions":{}}},"id":1433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1453:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1442:21:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c69642063726561746f722061646472657373","id":1435,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1465:25:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_4259564b459b7f2329d6dfde1735bd513320c28bd67c2fe25b44aa76ee2a6087","typeString":"literal_string \"Invalid creator address\""},"value":"Invalid creator address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4259564b459b7f2329d6dfde1735bd513320c28bd67c2fe25b44aa76ee2a6087","typeString":"literal_string \"Invalid creator address\""}],"id":1428,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1434:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1436,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1434:57:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1437,"nodeType":"ExpressionStatement","src":"1434:57:5"},{"expression":{"id":1443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1438,"name":"pendingRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1382,"src":"1510:14:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1440,"indexExpression":{"id":1439,"name":"creator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1415,"src":"1525:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1510:23:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"id":1441,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1537:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1541:5:5","memberName":"value","nodeType":"MemberAccess","src":"1537:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1510:36:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1444,"nodeType":"ExpressionStatement","src":"1510:36:5"},{"eventCall":{"arguments":[{"id":1446,"name":"creator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1415,"src":"1590:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1447,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1599:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1603:5:5","memberName":"value","nodeType":"MemberAccess","src":"1599:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1449,"name":"memeId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1417,"src":"1610:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1445,"name":"LikeRewardDeposited","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1390,"src":"1570:19:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":1450,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1570:47:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1451,"nodeType":"EmitStatement","src":"1565:52:5"}]},"documentation":{"id":1413,"nodeType":"StructuredDocumentation","src":"1120:147:5","text":" @dev Deposit reward for a like\n @param creator Address of the meme creator\n @param memeId ID of the meme being liked"},"functionSelector":"b05c438f","id":1453,"implemented":true,"kind":"function","modifiers":[],"name":"depositLikeReward","nameLocation":"1281:17:5","nodeType":"FunctionDefinition","parameters":{"id":1418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1415,"mutability":"mutable","name":"creator","nameLocation":"1307:7:5","nodeType":"VariableDeclaration","scope":1453,"src":"1299:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1414,"name":"address","nodeType":"ElementaryTypeName","src":"1299:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1417,"mutability":"mutable","name":"memeId","nameLocation":"1324:6:5","nodeType":"VariableDeclaration","scope":1453,"src":"1316:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1416,"name":"uint256","nodeType":"ElementaryTypeName","src":"1316:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1298:33:5"},"returnParameters":{"id":1419,"nodeType":"ParameterList","parameters":[],"src":"1349:0:5"},"scope":1685,"src":"1272:352:5","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":1540,"nodeType":"Block","src":"1948:889:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1465,"name":"totalAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1456,"src":"1966:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1466,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1980:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1966:15:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f207265776172647320746f20636c61696d","id":1468,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1983:21:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_584cf1690fd4124c524340f65c2f0897ce34c8cad61c485ada0c89030473339d","typeString":"literal_string \"No rewards to claim\""},"value":"No rewards to claim"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_584cf1690fd4124c524340f65c2f0897ce34c8cad61c485ada0c89030473339d","typeString":"literal_string \"No rewards to claim\""}],"id":1464,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1958:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1469,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1958:47:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1470,"nodeType":"ExpressionStatement","src":"1958:47:5"},{"assignments":[1472],"declarations":[{"constant":false,"id":1472,"mutability":"mutable","name":"alreadyClaimed","nameLocation":"2095:14:5","nodeType":"VariableDeclaration","scope":1540,"src":"2087:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1471,"name":"uint256","nodeType":"ElementaryTypeName","src":"2087:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1477,"initialValue":{"baseExpression":{"id":1473,"name":"claimedRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1378,"src":"2112:14:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1476,"indexExpression":{"expression":{"id":1474,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2127:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2131:6:5","memberName":"sender","nodeType":"MemberAccess","src":"2127:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2112:26:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2087:51:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1479,"name":"totalAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1456,"src":"2156:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1480,"name":"alreadyClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1472,"src":"2170:14:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2156:28:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416c726561647920636c61696d656420616c6c2072657761726473","id":1482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2186:29:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_b021c3242a8544174c11fe6ac27a3f4cad64f800971f0a5f8325e47522617856","typeString":"literal_string \"Already claimed all rewards\""},"value":"Already claimed all rewards"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b021c3242a8544174c11fe6ac27a3f4cad64f800971f0a5f8325e47522617856","typeString":"literal_string \"Already claimed all rewards\""}],"id":1478,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2148:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1483,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2148:68:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1484,"nodeType":"ExpressionStatement","src":"2148:68:5"},{"assignments":[1486],"declarations":[{"constant":false,"id":1486,"mutability":"mutable","name":"amountToClaim","nameLocation":"2234:13:5","nodeType":"VariableDeclaration","scope":1540,"src":"2226:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1485,"name":"uint256","nodeType":"ElementaryTypeName","src":"2226:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1490,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1487,"name":"totalAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1456,"src":"2250:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1488,"name":"alreadyClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1472,"src":"2264:14:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2250:28:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2226:52:5"},{"assignments":[1492],"declarations":[{"constant":false,"id":1492,"mutability":"mutable","name":"leaf","nameLocation":"2336:4:5","nodeType":"VariableDeclaration","scope":1540,"src":"2328:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1491,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2328:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1501,"initialValue":{"arguments":[{"arguments":[{"expression":{"id":1496,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2370:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2374:6:5","memberName":"sender","nodeType":"MemberAccess","src":"2370:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1498,"name":"totalAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1456,"src":"2382:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1494,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2353:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1495,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2357:12:5","memberName":"encodePacked","nodeType":"MemberAccess","src":"2353:16:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1499,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2353:41:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1493,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2343:9:5","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1500,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2343:52:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2328:67:5"},{"expression":{"arguments":[{"arguments":[{"id":1505,"name":"merkleProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1459,"src":"2445:11:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":1506,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1374,"src":"2458:10:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1507,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"2470:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1503,"name":"MerkleProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1359,"src":"2426:11:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MerkleProof_$1359_$","typeString":"type(library MerkleProof)"}},"id":1504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2438:6:5","memberName":"verify","nodeType":"MemberAccess","referencedDeclaration":315,"src":"2426:18:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$","typeString":"function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"}},"id":1508,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2426:49:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c6964204d65726b6c652070726f6f66","id":1509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2489:22:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_cfff98aea1f4314a786c0426b520c2e5600fd9bdeb9d59d5d51311c13153d3c6","typeString":"literal_string \"Invalid Merkle proof\""},"value":"Invalid Merkle proof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cfff98aea1f4314a786c0426b520c2e5600fd9bdeb9d59d5d51311c13153d3c6","typeString":"literal_string \"Invalid Merkle proof\""}],"id":1502,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2405:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1510,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2405:116:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1511,"nodeType":"ExpressionStatement","src":"2405:116:5"},{"expression":{"id":1517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1512,"name":"claimedRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1378,"src":"2573:14:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1515,"indexExpression":{"expression":{"id":1513,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2588:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2592:6:5","memberName":"sender","nodeType":"MemberAccess","src":"2588:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2573:26:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1516,"name":"totalAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1456,"src":"2602:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2573:40:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1518,"nodeType":"ExpressionStatement","src":"2573:40:5"},{"assignments":[1520,null],"declarations":[{"constant":false,"id":1520,"mutability":"mutable","name":"success","nameLocation":"2666:7:5","nodeType":"VariableDeclaration","scope":1540,"src":"2661:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1519,"name":"bool","nodeType":"ElementaryTypeName","src":"2661:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1528,"initialValue":{"arguments":[{"hexValue":"","id":1526,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2717:2:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"expression":{"id":1521,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2679:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2683:6:5","memberName":"sender","nodeType":"MemberAccess","src":"2679:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2690:4:5","memberName":"call","nodeType":"MemberAccess","src":"2679:15:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1524,"name":"amountToClaim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"2702:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2679:37:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2679:41:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2660:60:5"},{"expression":{"arguments":[{"id":1530,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1520,"src":"2738:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5472616e73666572206661696c6564","id":1531,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2747:17:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51","typeString":"literal_string \"Transfer failed\""},"value":"Transfer failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51","typeString":"literal_string \"Transfer failed\""}],"id":1529,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2730:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1532,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2730:35:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1533,"nodeType":"ExpressionStatement","src":"2730:35:5"},{"eventCall":{"arguments":[{"expression":{"id":1535,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2804:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2808:6:5","memberName":"sender","nodeType":"MemberAccess","src":"2804:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1537,"name":"amountToClaim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"2816:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1534,"name":"RewardsClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1396,"src":"2789:14:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":1538,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2789:41:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1539,"nodeType":"EmitStatement","src":"2784:46:5"}]},"documentation":{"id":1454,"nodeType":"StructuredDocumentation","src":"1634:190:5","text":" @dev Claim rewards using Merkle proof (batch claiming)\n @param totalAmount Total amount claimable by the user\n @param merkleProof Merkle proof for verification"},"functionSelector":"abd40e1e","id":1541,"implemented":true,"kind":"function","modifiers":[{"id":1462,"kind":"modifierInvocation","modifierName":{"id":1461,"name":"nonReentrant","nameLocations":["1935:12:5"],"nodeType":"IdentifierPath","referencedDeclaration":210,"src":"1935:12:5"},"nodeType":"ModifierInvocation","src":"1935:12:5"}],"name":"claimRewards","nameLocation":"1838:12:5","nodeType":"FunctionDefinition","parameters":{"id":1460,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1456,"mutability":"mutable","name":"totalAmount","nameLocation":"1868:11:5","nodeType":"VariableDeclaration","scope":1541,"src":"1860:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1455,"name":"uint256","nodeType":"ElementaryTypeName","src":"1860:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1459,"mutability":"mutable","name":"merkleProof","nameLocation":"1908:11:5","nodeType":"VariableDeclaration","scope":1541,"src":"1889:30:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1457,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1889:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1458,"nodeType":"ArrayTypeName","src":"1889:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"1850:75:5"},"returnParameters":{"id":1463,"nodeType":"ParameterList","parameters":[],"src":"1948:0:5"},"scope":1685,"src":"1829:1008:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1589,"nodeType":"Block","src":"2992:335:5","statements":[{"assignments":[1548],"declarations":[{"constant":false,"id":1548,"mutability":"mutable","name":"amount","nameLocation":"3010:6:5","nodeType":"VariableDeclaration","scope":1589,"src":"3002:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1547,"name":"uint256","nodeType":"ElementaryTypeName","src":"3002:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1553,"initialValue":{"baseExpression":{"id":1549,"name":"pendingRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1382,"src":"3019:14:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1552,"indexExpression":{"expression":{"id":1550,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3034:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3038:6:5","memberName":"sender","nodeType":"MemberAccess","src":"3034:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3019:26:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3002:43:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1555,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1548,"src":"3063:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1556,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3072:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3063:10:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f2070656e64696e672072657761726473","id":1558,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3075:20:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_8114dcf72780e60e19572e2c60a0c1f9869923f8566298d433960bbbf02ee9bd","typeString":"literal_string \"No pending rewards\""},"value":"No pending rewards"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8114dcf72780e60e19572e2c60a0c1f9869923f8566298d433960bbbf02ee9bd","typeString":"literal_string \"No pending rewards\""}],"id":1554,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3055:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1559,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3055:41:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1560,"nodeType":"ExpressionStatement","src":"3055:41:5"},{"expression":{"id":1566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1561,"name":"pendingRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1382,"src":"3115:14:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1564,"indexExpression":{"expression":{"id":1562,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3130:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3134:6:5","memberName":"sender","nodeType":"MemberAccess","src":"3130:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3115:26:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1565,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3144:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3115:30:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1567,"nodeType":"ExpressionStatement","src":"3115:30:5"},{"assignments":[1569,null],"declarations":[{"constant":false,"id":1569,"mutability":"mutable","name":"success","nameLocation":"3170:7:5","nodeType":"VariableDeclaration","scope":1589,"src":"3165:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1568,"name":"bool","nodeType":"ElementaryTypeName","src":"3165:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1577,"initialValue":{"arguments":[{"hexValue":"","id":1575,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3214:2:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"expression":{"id":1570,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3183:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3187:6:5","memberName":"sender","nodeType":"MemberAccess","src":"3183:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3194:4:5","memberName":"call","nodeType":"MemberAccess","src":"3183:15:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1573,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1548,"src":"3206:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"3183:30:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3183:34:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"3164:53:5"},{"expression":{"arguments":[{"id":1579,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1569,"src":"3235:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5472616e73666572206661696c6564","id":1580,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3244:17:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51","typeString":"literal_string \"Transfer failed\""},"value":"Transfer failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51","typeString":"literal_string \"Transfer failed\""}],"id":1578,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3227:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1581,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3227:35:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1582,"nodeType":"ExpressionStatement","src":"3227:35:5"},{"eventCall":{"arguments":[{"expression":{"id":1584,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3301:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3305:6:5","memberName":"sender","nodeType":"MemberAccess","src":"3301:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1586,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1548,"src":"3313:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1583,"name":"RewardsClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1396,"src":"3286:14:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":1587,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3286:34:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1588,"nodeType":"EmitStatement","src":"3281:39:5"}]},"documentation":{"id":1542,"nodeType":"StructuredDocumentation","src":"2847:87:5","text":" @dev Simple claim without Merkle proof (uses pendingRewards mapping)"},"functionSelector":"92bd7b2c","id":1590,"implemented":true,"kind":"function","modifiers":[{"id":1545,"kind":"modifierInvocation","modifierName":{"id":1544,"name":"nonReentrant","nameLocations":["2979:12:5"],"nodeType":"IdentifierPath","referencedDeclaration":210,"src":"2979:12:5"},"nodeType":"ModifierInvocation","src":"2979:12:5"}],"name":"claimPendingRewards","nameLocation":"2948:19:5","nodeType":"FunctionDefinition","parameters":{"id":1543,"nodeType":"ParameterList","parameters":[],"src":"2967:2:5"},"returnParameters":{"id":1546,"nodeType":"ParameterList","parameters":[],"src":"2992:0:5"},"scope":1685,"src":"2939:388:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1606,"nodeType":"Block","src":"3497:78:5","statements":[{"expression":{"id":1600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1598,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1374,"src":"3507:10:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1599,"name":"newRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1593,"src":"3520:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3507:20:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1601,"nodeType":"ExpressionStatement","src":"3507:20:5"},{"eventCall":{"arguments":[{"id":1603,"name":"newRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1593,"src":"3560:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1602,"name":"MerkleRootUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1400,"src":"3542:17:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$returns$__$","typeString":"function (bytes32)"}},"id":1604,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3542:26:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1605,"nodeType":"EmitStatement","src":"3537:31:5"}]},"documentation":{"id":1591,"nodeType":"StructuredDocumentation","src":"3337:93:5","text":" @dev Update Merkle root (admin only)\n @param newRoot New Merkle root"},"functionSelector":"4783f0ef","id":1607,"implemented":true,"kind":"function","modifiers":[{"id":1596,"kind":"modifierInvocation","modifierName":{"id":1595,"name":"onlyOwner","nameLocations":["3487:9:5"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"3487:9:5"},"nodeType":"ModifierInvocation","src":"3487:9:5"}],"name":"updateMerkleRoot","nameLocation":"3444:16:5","nodeType":"FunctionDefinition","parameters":{"id":1594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1593,"mutability":"mutable","name":"newRoot","nameLocation":"3469:7:5","nodeType":"VariableDeclaration","scope":1607,"src":"3461:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1592,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3461:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3460:17:5"},"returnParameters":{"id":1597,"nodeType":"ParameterList","parameters":[],"src":"3497:0:5"},"scope":1685,"src":"3435:140:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1623,"nodeType":"Block","src":"3765:88:5","statements":[{"expression":{"id":1617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1615,"name":"rewardPerLike","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1372,"src":"3775:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1616,"name":"newAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1610,"src":"3791:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3775:25:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1618,"nodeType":"ExpressionStatement","src":"3775:25:5"},{"eventCall":{"arguments":[{"id":1620,"name":"newAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1610,"src":"3836:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1619,"name":"RewardPerLikeUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1404,"src":"3815:20:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":1621,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3815:31:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1622,"nodeType":"EmitStatement","src":"3810:36:5"}]},"documentation":{"id":1608,"nodeType":"StructuredDocumentation","src":"3585:108:5","text":" @dev Update reward per like (admin only)\n @param newAmount New reward amount in wei"},"functionSelector":"d645a3de","id":1624,"implemented":true,"kind":"function","modifiers":[{"id":1613,"kind":"modifierInvocation","modifierName":{"id":1612,"name":"onlyOwner","nameLocations":["3755:9:5"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"3755:9:5"},"nodeType":"ModifierInvocation","src":"3755:9:5"}],"name":"updateRewardPerLike","nameLocation":"3707:19:5","nodeType":"FunctionDefinition","parameters":{"id":1611,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1610,"mutability":"mutable","name":"newAmount","nameLocation":"3735:9:5","nodeType":"VariableDeclaration","scope":1624,"src":"3727:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1609,"name":"uint256","nodeType":"ElementaryTypeName","src":"3727:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3726:19:5"},"returnParameters":{"id":1614,"nodeType":"ParameterList","parameters":[],"src":"3765:0:5"},"scope":1685,"src":"3698:155:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1636,"nodeType":"Block","src":"3999:44:5","statements":[{"expression":{"baseExpression":{"id":1632,"name":"pendingRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1382,"src":"4016:14:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1634,"indexExpression":{"id":1633,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1627,"src":"4031:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4016:20:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1631,"id":1635,"nodeType":"Return","src":"4009:27:5"}]},"documentation":{"id":1625,"nodeType":"StructuredDocumentation","src":"3863:58:5","text":" @dev Get pending rewards for an address"},"functionSelector":"f6ed2017","id":1637,"implemented":true,"kind":"function","modifiers":[],"name":"getPendingRewards","nameLocation":"3935:17:5","nodeType":"FunctionDefinition","parameters":{"id":1628,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1627,"mutability":"mutable","name":"user","nameLocation":"3961:4:5","nodeType":"VariableDeclaration","scope":1637,"src":"3953:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1626,"name":"address","nodeType":"ElementaryTypeName","src":"3953:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3952:14:5"},"returnParameters":{"id":1631,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1630,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1637,"src":"3990:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1629,"name":"uint256","nodeType":"ElementaryTypeName","src":"3990:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3989:9:5"},"scope":1685,"src":"3926:117:5","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":1649,"nodeType":"Block","src":"4189:44:5","statements":[{"expression":{"baseExpression":{"id":1645,"name":"claimedRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1378,"src":"4206:14:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1647,"indexExpression":{"id":1646,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1640,"src":"4221:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4206:20:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1644,"id":1648,"nodeType":"Return","src":"4199:27:5"}]},"documentation":{"id":1638,"nodeType":"StructuredDocumentation","src":"4053:58:5","text":" @dev Get claimed rewards for an address"},"functionSelector":"b9e35db0","id":1650,"implemented":true,"kind":"function","modifiers":[],"name":"getClaimedRewards","nameLocation":"4125:17:5","nodeType":"FunctionDefinition","parameters":{"id":1641,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1640,"mutability":"mutable","name":"user","nameLocation":"4151:4:5","nodeType":"VariableDeclaration","scope":1650,"src":"4143:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1639,"name":"address","nodeType":"ElementaryTypeName","src":"4143:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4142:14:5"},"returnParameters":{"id":1644,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1643,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1650,"src":"4180:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1642,"name":"uint256","nodeType":"ElementaryTypeName","src":"4180:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4179:9:5"},"scope":1685,"src":"4116:117:5","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":1679,"nodeType":"Block","src":"4351:164:5","statements":[{"assignments":[1657],"declarations":[{"constant":false,"id":1657,"mutability":"mutable","name":"balance","nameLocation":"4369:7:5","nodeType":"VariableDeclaration","scope":1679,"src":"4361:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1656,"name":"uint256","nodeType":"ElementaryTypeName","src":"4361:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1663,"initialValue":{"expression":{"arguments":[{"id":1660,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4387:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_MemeRewards_$1685","typeString":"contract MemeRewards"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_MemeRewards_$1685","typeString":"contract MemeRewards"}],"id":1659,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4379:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1658,"name":"address","nodeType":"ElementaryTypeName","src":"4379:7:5","typeDescriptions":{}}},"id":1661,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4379:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4393:7:5","memberName":"balance","nodeType":"MemberAccess","src":"4379:21:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4361:39:5"},{"assignments":[1665,null],"declarations":[{"constant":false,"id":1665,"mutability":"mutable","name":"success","nameLocation":"4416:7:5","nodeType":"VariableDeclaration","scope":1679,"src":"4411:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1664,"name":"bool","nodeType":"ElementaryTypeName","src":"4411:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1673,"initialValue":{"arguments":[{"hexValue":"","id":1671,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4458:2:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1666,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67,"src":"4429:5:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1667,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4429:7:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4437:4:5","memberName":"call","nodeType":"MemberAccess","src":"4429:12:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1669,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1657,"src":"4449:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"4429:28:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1672,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4429:32:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"4410:51:5"},{"expression":{"arguments":[{"id":1675,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1665,"src":"4479:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5769746864726177616c206661696c6564","id":1676,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4488:19:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_ec24209b271cd4d65181d9e8c6d9d718c94d28a7972011b1be42ea8d094a1a88","typeString":"literal_string \"Withdrawal failed\""},"value":"Withdrawal failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ec24209b271cd4d65181d9e8c6d9d718c94d28a7972011b1be42ea8d094a1a88","typeString":"literal_string \"Withdrawal failed\""}],"id":1674,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4471:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1677,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4471:37:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1678,"nodeType":"ExpressionStatement","src":"4471:37:5"}]},"documentation":{"id":1651,"nodeType":"StructuredDocumentation","src":"4243:55:5","text":" @dev Emergency withdraw (owner only)"},"functionSelector":"db2e21bc","id":1680,"implemented":true,"kind":"function","modifiers":[{"id":1654,"kind":"modifierInvocation","modifierName":{"id":1653,"name":"onlyOwner","nameLocations":["4341:9:5"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"4341:9:5"},"nodeType":"ModifierInvocation","src":"4341:9:5"}],"name":"emergencyWithdraw","nameLocation":"4312:17:5","nodeType":"FunctionDefinition","parameters":{"id":1652,"nodeType":"ParameterList","parameters":[],"src":"4329:2:5"},"returnParameters":{"id":1655,"nodeType":"ParameterList","parameters":[],"src":"4351:0:5"},"scope":1685,"src":"4303:212:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1683,"nodeType":"Block","src":"4590:2:5","statements":[]},"id":1684,"implemented":true,"kind":"receive","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1681,"nodeType":"ParameterList","parameters":[],"src":"4570:2:5"},"returnParameters":{"id":1682,"nodeType":"ParameterList","parameters":[],"src":"4590:0:5"},"scope":1685,"src":"4563:29:5","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":1686,"src":"355:4239:5","usedErrors":[13,18,191],"usedEvents":[24,1390,1396,1400,1404]}],"src":"32:4563:5"},"id":5}},"contracts":{"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}"}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}"}},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"ReentrancyGuard":{"abi":[{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at, consider using {ReentrancyGuardTransient} instead. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3cf0c69ab827e3251db9ee6a50647d62c90ba580a4d7bbff21f2bea39e7b2f4a\",\"dweb:/ipfs/QmZiKwtKU1SBX4RGfQtY7PZfiapbbu6SZ9vizGQD9UHjRA\"]}},\"version\":1}"}},"@openzeppelin/contracts/utils/cryptography/Hashes.sol":{"Hashes":{"abi":[],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122072bad1f756ed48efa7766af5a5a39a0e467ef88069f5e48b0220281478a4d22264736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH19 0xBAD1F756ED48EFA7766AF5A5A39A0E467EF880 PUSH10 0xF5E48B0220281478A4D2 0x22 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"221:811:3:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;221:811:3;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122072bad1f756ed48efa7766af5a5a39a0e467ef88069f5e48b0220281478a4d22264736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH19 0xBAD1F756ED48EFA7766AF5A5A39A0E467EF880 PUSH10 0xF5E48B0220281478A4D2 0x22 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"221:811:3:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library of standard hash functions. _Available since v5.1._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":\"Hashes\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":{\"keccak256\":\"0x8cbd338f083224b4b6f0ff42cbda641a0a6c31ffcdca197452b97fe4d0918269\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f517dec5ba0c6491395acbf7f1d621f4e89e8f218bf5303c867b1c5ad70c6b11\",\"dweb:/ipfs/QmWmXHRLEw8W6ckth7NyYTU88YfvuS7xSsfae5ksL8qNUe\"]}},\"version\":1}"}},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"MerkleProof":{"abi":[{"inputs":[],"name":"MerkleProofInvalidMultiproof","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206722f35cd17e3220e03915bd9238d934bfec99e0f54546acc672387d9fdc9f6764736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH8 0x22F35CD17E3220E0 CODECOPY ISZERO 0xBD SWAP3 CODESIZE 0xD9 CALLVALUE 0xBF 0xEC SWAP10 0xE0 CREATE2 GASLIMIT CHAINID 0xAC 0xC6 PUSH19 0x387D9FDC9F6764736F6C634300081400330000 ","sourceMap":"1353:22982:4:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1353:22982:4;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206722f35cd17e3220e03915bd9238d934bfec99e0f54546acc672387d9fdc9f6764736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH8 0x22F35CD17E3220E0 CODECOPY ISZERO 0xBD SWAP3 CODESIZE 0xD9 CALLVALUE 0xBF 0xEC SWAP10 0xE0 CREATE2 GASLIMIT CHAINID 0xAC 0xC6 PUSH19 0x387D9FDC9F6764736F6C634300081400330000 ","sourceMap":"1353:22982:4:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MerkleProofInvalidMultiproof\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the Merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates Merkle trees that are safe against this attack out of the box. IMPORTANT: Consider memory side-effects when using custom hashing functions that access memory in an unsafe way. NOTE: This library supports proof verification for merkle trees built using custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving leaf inclusion in trees built using non-commutative hashing functions requires additional logic that is not supported by this library.\",\"errors\":{\"MerkleProofInvalidMultiproof()\":[{\"details\":\"The multiproof provided is not valid.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":\"MerkleProof\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":{\"keccak256\":\"0x8cbd338f083224b4b6f0ff42cbda641a0a6c31ffcdca197452b97fe4d0918269\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f517dec5ba0c6491395acbf7f1d621f4e89e8f218bf5303c867b1c5ad70c6b11\",\"dweb:/ipfs/QmWmXHRLEw8W6ckth7NyYTU88YfvuS7xSsfae5ksL8qNUe\"]},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0x36a0c409c437a753cac9b92b75f93b0fbe92803bf2c8ff1517e54b247f166134\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0f91ba472de411aa557cdbf6560c40750d87bd11c9060bc04d2ba7119af9d5a6\",\"dweb:/ipfs/QmQjtYo2i7dDvzCEzZ67bDoNSG4RrwMoxPWuqFmX5Xzpuw\"]}},\"version\":1}"}},"contracts/MemeRewards.sol":{"MemeRewards":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"creator","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"memeId","type":"uint256"}],"name":"LikeRewardDeposited","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"newRoot","type":"bytes32"}],"name":"MerkleRootUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"newAmount","type":"uint256"}],"name":"RewardPerLikeUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"creator","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"RewardsClaimed","type":"event"},{"inputs":[],"name":"claimPendingRewards","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"totalAmount","type":"uint256"},{"internalType":"bytes32[]","name":"merkleProof","type":"bytes32[]"}],"name":"claimRewards","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"claimedRewards","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"creator","type":"address"},{"internalType":"uint256","name":"memeId","type":"uint256"}],"name":"depositLikeReward","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"emergencyWithdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"getClaimedRewards","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"getPendingRewards","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"merkleRoot","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"pendingRewards","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rewardPerLike","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"newRoot","type":"bytes32"}],"name":"updateMerkleRoot","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newAmount","type":"uint256"}],"name":"updateRewardPerLike","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"evm":{"bytecode":{"functionDebugData":{"@_1412":{"entryPoint":null,"id":1412,"parameterSlots":0,"returnSlots":0},"@_199":{"entryPoint":null,"id":199,"parameterSlots":0,"returnSlots":0},"@_50":{"entryPoint":null,"id":50,"parameterSlots":1,"returnSlots":0},"@_transferOwnership_146":{"entryPoint":86,"id":146,"parameterSlots":1,"returnSlots":0},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:219:6","statements":[{"nodeType":"YulBlock","src":"6:3:6","statements":[]},{"body":{"nodeType":"YulBlock","src":"115:102:6","statements":[{"nodeType":"YulAssignment","src":"125:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"137:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"148:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"133:3:6"},"nodeType":"YulFunctionCall","src":"133:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"125:4:6"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"167:9:6"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"182:6:6"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"198:3:6","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"203:1:6","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"194:3:6"},"nodeType":"YulFunctionCall","src":"194:11:6"},{"kind":"number","nodeType":"YulLiteral","src":"207:1:6","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"190:3:6"},"nodeType":"YulFunctionCall","src":"190:19:6"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"178:3:6"},"nodeType":"YulFunctionCall","src":"178:32:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"160:6:6"},"nodeType":"YulFunctionCall","src":"160:51:6"},"nodeType":"YulExpressionStatement","src":"160:51:6"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"84:9:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"95:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"106:4:6","type":""}],"src":"14:203:6"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n}","id":6,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405266038d7ea4c6800060025534801561001b57600080fd5b506001600055338061004757604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61005081610056565b506100a8565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b610c12806100b76000396000f3fe6080604052600436106100ec5760003560e01c8063abd40e1e1161008a578063d645a3de11610059578063d645a3de1461026e578063db2e21bc1461028e578063f2fde38b146102a3578063f6ed2017146102c357600080fd5b8063abd40e1e146101d8578063b05c438f146101f8578063b9e35db01461020b578063bd8343451461024157600080fd5b8063715018a6116100c6578063715018a6146101705780638da5cb5b1461018557806392bd7b2c146101ad57806395646fd9146101c257600080fd5b80632eb4a7ab146100f857806331d7a262146101215780634783f0ef1461014e57600080fd5b366100f357005b600080fd5b34801561010457600080fd5b5061010e60035481565b6040519081526020015b60405180910390f35b34801561012d57600080fd5b5061010e61013c366004610a94565b60056020526000908152604090205481565b34801561015a57600080fd5b5061016e610169366004610aaf565b6102f9565b005b34801561017c57600080fd5b5061016e61033d565b34801561019157600080fd5b506001546040516001600160a01b039091168152602001610118565b3480156101b957600080fd5b5061016e610351565b3480156101ce57600080fd5b5061010e60025481565b3480156101e457600080fd5b5061016e6101f3366004610ac8565b61048a565b61016e610206366004610b47565b6106eb565b34801561021757600080fd5b5061010e610226366004610a94565b6001600160a01b031660009081526004602052604090205490565b34801561024d57600080fd5b5061010e61025c366004610a94565b60046020526000908152604090205481565b34801561027a57600080fd5b5061016e610289366004610aaf565b610808565b34801561029a57600080fd5b5061016e610845565b3480156102af57600080fd5b5061016e6102be366004610a94565b6108fa565b3480156102cf57600080fd5b5061010e6102de366004610a94565b6001600160a01b031660009081526005602052604090205490565b610301610938565b60038190556040518181527f90004c04698bc3322499a575ed3752dd4abf33e0a7294c06a787a0fe01bea941906020015b60405180910390a150565b610345610938565b61034f6000610965565b565b6103596109b7565b33600090815260056020526040902054806103b05760405162461bcd60e51b81526020600482015260126024820152714e6f2070656e64696e67207265776172647360701b60448201526064015b60405180910390fd5b336000818152600560205260408082208290555190919083908381818185875af1925050503d8060008114610401576040519150601f19603f3d011682016040523d82523d6000602084013e610406565b606091505b50509050806104495760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b60448201526064016103a7565b60405182815233907ffc30cddea38e2bf4d6ea7d3f9ed3b6ad7f176419f4963bd81318067a4aee73fe9060200160405180910390a2505061034f6001600055565b6104926109b7565b600083116104d85760405162461bcd60e51b81526020600482015260136024820152724e6f207265776172647320746f20636c61696d60681b60448201526064016103a7565b336000908152600460205260409020548084116105375760405162461bcd60e51b815260206004820152601b60248201527f416c726561647920636c61696d656420616c6c2072657761726473000000000060448201526064016103a7565b60006105438286610b87565b6040516bffffffffffffffffffffffff193360601b166020820152603481018790529091506000906054016040516020818303038152906040528051906020012090506105c78585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060035491508490506109e1565b61060a5760405162461bcd60e51b815260206004820152601460248201527324b73b30b634b21026b2b935b63290383937b7b360611b60448201526064016103a7565b336000818152600460205260408082208990555190919084908381818185875af1925050503d806000811461065b576040519150601f19603f3d011682016040523d82523d6000602084013e610660565b606091505b50509050806106a35760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b60448201526064016103a7565b60405183815233907ffc30cddea38e2bf4d6ea7d3f9ed3b6ad7f176419f4963bd81318067a4aee73fe9060200160405180910390a2505050506106e66001600055565b505050565b60025434101561073d5760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e742072657761726420616d6f756e7400000000000060448201526064016103a7565b6001600160a01b0382166107935760405162461bcd60e51b815260206004820152601760248201527f496e76616c69642063726561746f72206164647265737300000000000000000060448201526064016103a7565b6001600160a01b038216600090815260056020526040812080543492906107bb908490610b9a565b909155505060408051348152602081018390526001600160a01b038416917feafb9fc200c0649f201654890c7c9185964f2f4ff66727753763452c51bd9286910160405180910390a25050565b610810610938565b60028190556040518181527fe7fca20a845ccc07535ff95293a502f93dbf8a1106113e56257e692a0904511190602001610332565b61084d610938565b4760006108626001546001600160a01b031690565b6001600160a01b03168260405160006040518083038185875af1925050503d80600081146108ac576040519150601f19603f3d011682016040523d82523d6000602084013e6108b1565b606091505b50509050806108f65760405162461bcd60e51b815260206004820152601160248201527015da5d1a191c985dd85b0819985a5b1959607a1b60448201526064016103a7565b5050565b610902610938565b6001600160a01b03811661092c57604051631e4fbdf760e01b8152600060048201526024016103a7565b61093581610965565b50565b6001546001600160a01b0316331461034f5760405163118cdaa760e01b81523360048201526024016103a7565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6002600054036109da57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6000826109ee85846109f7565b14949350505050565b600081815b8451811015610a3c57610a2882868381518110610a1b57610a1b610bad565b6020026020010151610a46565b915080610a3481610bc3565b9150506109fc565b5090505b92915050565b6000818310610a62576000828152602084905260409020610a71565b60008381526020839052604090205b9392505050565b80356001600160a01b0381168114610a8f57600080fd5b919050565b600060208284031215610aa657600080fd5b610a7182610a78565b600060208284031215610ac157600080fd5b5035919050565b600080600060408486031215610add57600080fd5b83359250602084013567ffffffffffffffff80821115610afc57600080fd5b818601915086601f830112610b1057600080fd5b813581811115610b1f57600080fd5b8760208260051b8501011115610b3457600080fd5b6020830194508093505050509250925092565b60008060408385031215610b5a57600080fd5b610b6383610a78565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610a4057610a40610b71565b80820180821115610a4057610a40610b71565b634e487b7160e01b600052603260045260246000fd5b600060018201610bd557610bd5610b71565b506001019056fea2646970667358221220898869460c0ec57938b5fd32b6f9a5ad34070e19d002848e7c9f46e3c94bd72f64736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH7 0x38D7EA4C68000 PUSH1 0x2 SSTORE CALLVALUE DUP1 ISZERO PUSH2 0x1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x0 SSTORE CALLER DUP1 PUSH2 0x47 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x50 DUP2 PUSH2 0x56 JUMP JUMPDEST POP PUSH2 0xA8 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0xC12 DUP1 PUSH2 0xB7 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xEC JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xABD40E1E GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xD645A3DE GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xD645A3DE EQ PUSH2 0x26E JUMPI DUP1 PUSH4 0xDB2E21BC EQ PUSH2 0x28E JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2A3 JUMPI DUP1 PUSH4 0xF6ED2017 EQ PUSH2 0x2C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xABD40E1E EQ PUSH2 0x1D8 JUMPI DUP1 PUSH4 0xB05C438F EQ PUSH2 0x1F8 JUMPI DUP1 PUSH4 0xB9E35DB0 EQ PUSH2 0x20B JUMPI DUP1 PUSH4 0xBD834345 EQ PUSH2 0x241 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 GT PUSH2 0xC6 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x170 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x185 JUMPI DUP1 PUSH4 0x92BD7B2C EQ PUSH2 0x1AD JUMPI DUP1 PUSH4 0x95646FD9 EQ PUSH2 0x1C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2EB4A7AB EQ PUSH2 0xF8 JUMPI DUP1 PUSH4 0x31D7A262 EQ PUSH2 0x121 JUMPI DUP1 PUSH4 0x4783F0EF EQ PUSH2 0x14E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0xF3 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x104 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10E PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10E PUSH2 0x13C CALLDATASIZE PUSH1 0x4 PUSH2 0xA94 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x15A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16E PUSH2 0x169 CALLDATASIZE PUSH1 0x4 PUSH2 0xAAF JUMP JUMPDEST PUSH2 0x2F9 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x17C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16E PUSH2 0x33D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x191 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x118 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16E PUSH2 0x351 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10E PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16E PUSH2 0x1F3 CALLDATASIZE PUSH1 0x4 PUSH2 0xAC8 JUMP JUMPDEST PUSH2 0x48A JUMP JUMPDEST PUSH2 0x16E PUSH2 0x206 CALLDATASIZE PUSH1 0x4 PUSH2 0xB47 JUMP JUMPDEST PUSH2 0x6EB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x217 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10E PUSH2 0x226 CALLDATASIZE PUSH1 0x4 PUSH2 0xA94 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10E PUSH2 0x25C CALLDATASIZE PUSH1 0x4 PUSH2 0xA94 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x27A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16E PUSH2 0x289 CALLDATASIZE PUSH1 0x4 PUSH2 0xAAF JUMP JUMPDEST PUSH2 0x808 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x29A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16E PUSH2 0x845 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16E PUSH2 0x2BE CALLDATASIZE PUSH1 0x4 PUSH2 0xA94 JUMP JUMPDEST PUSH2 0x8FA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10E PUSH2 0x2DE CALLDATASIZE PUSH1 0x4 PUSH2 0xA94 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x301 PUSH2 0x938 JUMP JUMPDEST PUSH1 0x3 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0x90004C04698BC3322499A575ED3752DD4ABF33E0A7294C06A787A0FE01BEA941 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x345 PUSH2 0x938 JUMP JUMPDEST PUSH2 0x34F PUSH1 0x0 PUSH2 0x965 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x359 PUSH2 0x9B7 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP1 PUSH2 0x3B0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x4E6F2070656E64696E672072657761726473 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP3 SWAP1 SSTORE MLOAD SWAP1 SWAP2 SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x401 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x406 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x449 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x151C985B9CD9995C8819985A5B1959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE CALLER SWAP1 PUSH32 0xFC30CDDEA38E2BF4D6EA7D3F9ED3B6AD7F176419F4963BD81318067A4AEE73FE SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP PUSH2 0x34F PUSH1 0x1 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH2 0x492 PUSH2 0x9B7 JUMP JUMPDEST PUSH1 0x0 DUP4 GT PUSH2 0x4D8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x4E6F207265776172647320746F20636C61696D PUSH1 0x68 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3A7 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP1 DUP5 GT PUSH2 0x537 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416C726561647920636C61696D656420616C6C20726577617264730000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3A7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x543 DUP3 DUP7 PUSH2 0xB87 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT CALLER PUSH1 0x60 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP8 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x54 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x5C7 DUP6 DUP6 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP PUSH1 0x3 SLOAD SWAP2 POP DUP5 SWAP1 POP PUSH2 0x9E1 JUMP JUMPDEST PUSH2 0x60A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x24B73B30B634B21026B2B935B63290383937B7B3 PUSH1 0x61 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3A7 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP10 SWAP1 SSTORE MLOAD SWAP1 SWAP2 SWAP1 DUP5 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x65B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x660 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x6A3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x151C985B9CD9995C8819985A5B1959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 DUP2 MSTORE CALLER SWAP1 PUSH32 0xFC30CDDEA38E2BF4D6EA7D3F9ED3B6AD7F176419F4963BD81318067A4AEE73FE SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP PUSH2 0x6E6 PUSH1 0x1 PUSH1 0x0 SSTORE JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD CALLVALUE LT ISZERO PUSH2 0x73D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E742072657761726420616D6F756E74000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3A7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x793 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C69642063726561746F722061646472657373000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3A7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD CALLVALUE SWAP3 SWAP1 PUSH2 0x7BB SWAP1 DUP5 SWAP1 PUSH2 0xB9A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD CALLVALUE DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP2 PUSH32 0xEAFB9FC200C0649F201654890C7C9185964F2F4FF66727753763452C51BD9286 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH2 0x810 PUSH2 0x938 JUMP JUMPDEST PUSH1 0x2 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0xE7FCA20A845CCC07535FF95293A502F93DBF8A1106113E56257E692A09045111 SWAP1 PUSH1 0x20 ADD PUSH2 0x332 JUMP JUMPDEST PUSH2 0x84D PUSH2 0x938 JUMP JUMPDEST SELFBALANCE PUSH1 0x0 PUSH2 0x862 PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x8AC JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x8B1 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x8F6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x15DA5D1A191C985DD85B0819985A5B1959 PUSH1 0x7A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3A7 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x902 PUSH2 0x938 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x92C JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3A7 JUMP JUMPDEST PUSH2 0x935 DUP2 PUSH2 0x965 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x34F JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3A7 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD SUB PUSH2 0x9DA JUMPI PUSH1 0x40 MLOAD PUSH4 0x3EE5AEB5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x9EE DUP6 DUP5 PUSH2 0x9F7 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xA3C JUMPI PUSH2 0xA28 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xA1B JUMPI PUSH2 0xA1B PUSH2 0xBAD JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xA46 JUMP JUMPDEST SWAP2 POP DUP1 PUSH2 0xA34 DUP2 PUSH2 0xBC3 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x9FC JUMP JUMPDEST POP SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xA62 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xA71 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xA8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA71 DUP3 PUSH2 0xA78 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xADD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xAFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xB10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xB1F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xB34 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP5 POP DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB63 DUP4 PUSH2 0xA78 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0xA40 JUMPI PUSH2 0xA40 PUSH2 0xB71 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0xA40 JUMPI PUSH2 0xA40 PUSH2 0xB71 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0xBD5 JUMPI PUSH2 0xBD5 PUSH2 0xB71 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP10 DUP9 PUSH10 0x460C0EC57938B5FD32B6 0xF9 0xA5 0xAD CALLVALUE SMOD 0xE NOT 0xD0 MUL DUP5 DUP15 PUSH29 0x9F46E3C94BD72F64736F6C634300081400330000000000000000000000 ","sourceMap":"355:4239:5:-:0;;;480:11;449:42;;1074:36;;;;;;;;;-1:-1:-1;1857:1:2;2061:7;:21;1096:10:5;;1269:95:0;;1322:31;;-1:-1:-1;;;1322:31:0;;1350:1;1322:31;;;160:51:6;133:18;;1322:31:0;;;;;;;1269:95;1373:32;1392:12;1373:18;:32::i;:::-;1225:187;355:4239:5;;2912:187:0;3004:6;;;-1:-1:-1;;;;;3020:17:0;;;-1:-1:-1;;;;;;3020:17:0;;;;;;;3052:40;;3004:6;;;3020:17;3004:6;;3052:40;;2985:16;;3052:40;2975:124;2912:187;:::o;14:203:6:-;355:4239:5;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_1684":{"entryPoint":null,"id":1684,"parameterSlots":0,"returnSlots":0},"@_checkOwner_84":{"entryPoint":2360,"id":84,"parameterSlots":0,"returnSlots":0},"@_msgSender_159":{"entryPoint":null,"id":159,"parameterSlots":0,"returnSlots":1},"@_nonReentrantAfter_234":{"entryPoint":null,"id":234,"parameterSlots":0,"returnSlots":0},"@_nonReentrantBefore_226":{"entryPoint":2487,"id":226,"parameterSlots":0,"returnSlots":0},"@_transferOwnership_146":{"entryPoint":2405,"id":146,"parameterSlots":1,"returnSlots":0},"@claimPendingRewards_1590":{"entryPoint":849,"id":1590,"parameterSlots":0,"returnSlots":0},"@claimRewards_1541":{"entryPoint":1162,"id":1541,"parameterSlots":3,"returnSlots":0},"@claimedRewards_1378":{"entryPoint":null,"id":1378,"parameterSlots":0,"returnSlots":0},"@commutativeKeccak256_273":{"entryPoint":2630,"id":273,"parameterSlots":2,"returnSlots":1},"@depositLikeReward_1453":{"entryPoint":1771,"id":1453,"parameterSlots":2,"returnSlots":0},"@efficientKeccak256_285":{"entryPoint":null,"id":285,"parameterSlots":2,"returnSlots":1},"@emergencyWithdraw_1680":{"entryPoint":2117,"id":1680,"parameterSlots":0,"returnSlots":0},"@getClaimedRewards_1650":{"entryPoint":null,"id":1650,"parameterSlots":1,"returnSlots":1},"@getPendingRewards_1637":{"entryPoint":null,"id":1637,"parameterSlots":1,"returnSlots":1},"@merkleRoot_1374":{"entryPoint":null,"id":1374,"parameterSlots":0,"returnSlots":0},"@owner_67":{"entryPoint":null,"id":67,"parameterSlots":0,"returnSlots":1},"@pendingRewards_1382":{"entryPoint":null,"id":1382,"parameterSlots":0,"returnSlots":0},"@processProof_356":{"entryPoint":2551,"id":356,"parameterSlots":2,"returnSlots":1},"@renounceOwnership_98":{"entryPoint":829,"id":98,"parameterSlots":0,"returnSlots":0},"@rewardPerLike_1372":{"entryPoint":null,"id":1372,"parameterSlots":0,"returnSlots":0},"@transferOwnership_126":{"entryPoint":2298,"id":126,"parameterSlots":1,"returnSlots":0},"@updateMerkleRoot_1607":{"entryPoint":761,"id":1607,"parameterSlots":1,"returnSlots":0},"@updateRewardPerLike_1624":{"entryPoint":2056,"id":1624,"parameterSlots":1,"returnSlots":0},"@verify_315":{"entryPoint":2529,"id":315,"parameterSlots":3,"returnSlots":1},"abi_decode_address":{"entryPoint":2680,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":2708,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":2887,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32":{"entryPoint":2735,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_array$_t_bytes32_$dyn_calldata_ptr":{"entryPoint":2760,"id":null,"parameterSlots":2,"returnSlots":3},"abi_encode_tuple_packed_t_address_t_uint256__to_t_address_t_uint256__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4259564b459b7f2329d6dfde1735bd513320c28bd67c2fe25b44aa76ee2a6087__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_584cf1690fd4124c524340f65c2f0897ce34c8cad61c485ada0c89030473339d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_5a70a1957d0bc5746a316d65d79c814e231a04b6179c4c7790fdd52fe086f25c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8114dcf72780e60e19572e2c60a0c1f9869923f8566298d433960bbbf02ee9bd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b021c3242a8544174c11fe6ac27a3f4cad64f800971f0a5f8325e47522617856__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cfff98aea1f4314a786c0426b520c2e5600fd9bdeb9d59d5d51311c13153d3c6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_ec24209b271cd4d65181d9e8c6d9d718c94d28a7972011b1be42ea8d094a1a88__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":2970,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":2951,"id":null,"parameterSlots":2,"returnSlots":1},"increment_t_uint256":{"entryPoint":3011,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":2929,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":2989,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:6495:6","statements":[{"nodeType":"YulBlock","src":"6:3:6","statements":[]},{"body":{"nodeType":"YulBlock","src":"115:76:6","statements":[{"nodeType":"YulAssignment","src":"125:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"137:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"148:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"133:3:6"},"nodeType":"YulFunctionCall","src":"133:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"125:4:6"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"167:9:6"},{"name":"value0","nodeType":"YulIdentifier","src":"178:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"160:6:6"},"nodeType":"YulFunctionCall","src":"160:25:6"},"nodeType":"YulExpressionStatement","src":"160:25:6"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"84:9:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"95:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"106:4:6","type":""}],"src":"14:177:6"},{"body":{"nodeType":"YulBlock","src":"245:124:6","statements":[{"nodeType":"YulAssignment","src":"255:29:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"277:6:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"264:12:6"},"nodeType":"YulFunctionCall","src":"264:20:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"255:5:6"}]},{"body":{"nodeType":"YulBlock","src":"347:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"356:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"359:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"349:6:6"},"nodeType":"YulFunctionCall","src":"349:12:6"},"nodeType":"YulExpressionStatement","src":"349:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"306:5:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"317:5:6"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"332:3:6","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"337:1:6","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"328:3:6"},"nodeType":"YulFunctionCall","src":"328:11:6"},{"kind":"number","nodeType":"YulLiteral","src":"341:1:6","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"324:3:6"},"nodeType":"YulFunctionCall","src":"324:19:6"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"313:3:6"},"nodeType":"YulFunctionCall","src":"313:31:6"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"303:2:6"},"nodeType":"YulFunctionCall","src":"303:42:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"296:6:6"},"nodeType":"YulFunctionCall","src":"296:50:6"},"nodeType":"YulIf","src":"293:70:6"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"224:6:6","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"235:5:6","type":""}],"src":"196:173:6"},{"body":{"nodeType":"YulBlock","src":"444:116:6","statements":[{"body":{"nodeType":"YulBlock","src":"490:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"499:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"502:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"492:6:6"},"nodeType":"YulFunctionCall","src":"492:12:6"},"nodeType":"YulExpressionStatement","src":"492:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"465:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"474:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"461:3:6"},"nodeType":"YulFunctionCall","src":"461:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"486:2:6","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"457:3:6"},"nodeType":"YulFunctionCall","src":"457:32:6"},"nodeType":"YulIf","src":"454:52:6"},{"nodeType":"YulAssignment","src":"515:39:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"544:9:6"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"525:18:6"},"nodeType":"YulFunctionCall","src":"525:29:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"515:6:6"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"410:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"421:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"433:6:6","type":""}],"src":"374:186:6"},{"body":{"nodeType":"YulBlock","src":"666:76:6","statements":[{"nodeType":"YulAssignment","src":"676:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"688:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"699:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"684:3:6"},"nodeType":"YulFunctionCall","src":"684:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"676:4:6"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"718:9:6"},{"name":"value0","nodeType":"YulIdentifier","src":"729:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"711:6:6"},"nodeType":"YulFunctionCall","src":"711:25:6"},"nodeType":"YulExpressionStatement","src":"711:25:6"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"635:9:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"646:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"657:4:6","type":""}],"src":"565:177:6"},{"body":{"nodeType":"YulBlock","src":"817:110:6","statements":[{"body":{"nodeType":"YulBlock","src":"863:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"872:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"875:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"865:6:6"},"nodeType":"YulFunctionCall","src":"865:12:6"},"nodeType":"YulExpressionStatement","src":"865:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"838:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"847:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"834:3:6"},"nodeType":"YulFunctionCall","src":"834:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"859:2:6","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"830:3:6"},"nodeType":"YulFunctionCall","src":"830:32:6"},"nodeType":"YulIf","src":"827:52:6"},{"nodeType":"YulAssignment","src":"888:33:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"911:9:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"898:12:6"},"nodeType":"YulFunctionCall","src":"898:23:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"888:6:6"}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"783:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"794:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"806:6:6","type":""}],"src":"747:180:6"},{"body":{"nodeType":"YulBlock","src":"1033:102:6","statements":[{"nodeType":"YulAssignment","src":"1043:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1055:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"1066:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1051:3:6"},"nodeType":"YulFunctionCall","src":"1051:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1043:4:6"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1085:9:6"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1100:6:6"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1116:3:6","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1121:1:6","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1112:3:6"},"nodeType":"YulFunctionCall","src":"1112:11:6"},{"kind":"number","nodeType":"YulLiteral","src":"1125:1:6","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1108:3:6"},"nodeType":"YulFunctionCall","src":"1108:19:6"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1096:3:6"},"nodeType":"YulFunctionCall","src":"1096:32:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1078:6:6"},"nodeType":"YulFunctionCall","src":"1078:51:6"},"nodeType":"YulExpressionStatement","src":"1078:51:6"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1002:9:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1013:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1024:4:6","type":""}],"src":"932:203:6"},{"body":{"nodeType":"YulBlock","src":"1262:561:6","statements":[{"body":{"nodeType":"YulBlock","src":"1308:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1317:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1320:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1310:6:6"},"nodeType":"YulFunctionCall","src":"1310:12:6"},"nodeType":"YulExpressionStatement","src":"1310:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1283:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"1292:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1279:3:6"},"nodeType":"YulFunctionCall","src":"1279:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"1304:2:6","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1275:3:6"},"nodeType":"YulFunctionCall","src":"1275:32:6"},"nodeType":"YulIf","src":"1272:52:6"},{"nodeType":"YulAssignment","src":"1333:33:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1356:9:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1343:12:6"},"nodeType":"YulFunctionCall","src":"1343:23:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1333:6:6"}]},{"nodeType":"YulVariableDeclaration","src":"1375:46:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1406:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"1417:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1402:3:6"},"nodeType":"YulFunctionCall","src":"1402:18:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1389:12:6"},"nodeType":"YulFunctionCall","src":"1389:32:6"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1379:6:6","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1430:28:6","value":{"kind":"number","nodeType":"YulLiteral","src":"1440:18:6","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1434:2:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"1485:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1494:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1497:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1487:6:6"},"nodeType":"YulFunctionCall","src":"1487:12:6"},"nodeType":"YulExpressionStatement","src":"1487:12:6"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1473:6:6"},{"name":"_1","nodeType":"YulIdentifier","src":"1481:2:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1470:2:6"},"nodeType":"YulFunctionCall","src":"1470:14:6"},"nodeType":"YulIf","src":"1467:34:6"},{"nodeType":"YulVariableDeclaration","src":"1510:32:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1524:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"1535:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1520:3:6"},"nodeType":"YulFunctionCall","src":"1520:22:6"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"1514:2:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"1590:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1599:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1602:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1592:6:6"},"nodeType":"YulFunctionCall","src":"1592:12:6"},"nodeType":"YulExpressionStatement","src":"1592:12:6"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1569:2:6"},{"kind":"number","nodeType":"YulLiteral","src":"1573:4:6","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1565:3:6"},"nodeType":"YulFunctionCall","src":"1565:13:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1580:7:6"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1561:3:6"},"nodeType":"YulFunctionCall","src":"1561:27:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1554:6:6"},"nodeType":"YulFunctionCall","src":"1554:35:6"},"nodeType":"YulIf","src":"1551:55:6"},{"nodeType":"YulVariableDeclaration","src":"1615:30:6","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1642:2:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1629:12:6"},"nodeType":"YulFunctionCall","src":"1629:16:6"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1619:6:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"1672:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1681:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1684:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1674:6:6"},"nodeType":"YulFunctionCall","src":"1674:12:6"},"nodeType":"YulExpressionStatement","src":"1674:12:6"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1660:6:6"},{"name":"_1","nodeType":"YulIdentifier","src":"1668:2:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1657:2:6"},"nodeType":"YulFunctionCall","src":"1657:14:6"},"nodeType":"YulIf","src":"1654:34:6"},{"body":{"nodeType":"YulBlock","src":"1746:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1755:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1758:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1748:6:6"},"nodeType":"YulFunctionCall","src":"1748:12:6"},"nodeType":"YulExpressionStatement","src":"1748:12:6"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1711:2:6"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1719:1:6","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"1722:6:6"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1715:3:6"},"nodeType":"YulFunctionCall","src":"1715:14:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1707:3:6"},"nodeType":"YulFunctionCall","src":"1707:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"1732:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1703:3:6"},"nodeType":"YulFunctionCall","src":"1703:32:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1737:7:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1700:2:6"},"nodeType":"YulFunctionCall","src":"1700:45:6"},"nodeType":"YulIf","src":"1697:65:6"},{"nodeType":"YulAssignment","src":"1771:21:6","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1785:2:6"},{"kind":"number","nodeType":"YulLiteral","src":"1789:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1781:3:6"},"nodeType":"YulFunctionCall","src":"1781:11:6"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1771:6:6"}]},{"nodeType":"YulAssignment","src":"1801:16:6","value":{"name":"length","nodeType":"YulIdentifier","src":"1811:6:6"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1801:6:6"}]}]},"name":"abi_decode_tuple_t_uint256t_array$_t_bytes32_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1212:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1223:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1235:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1243:6:6","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1251:6:6","type":""}],"src":"1140:683:6"},{"body":{"nodeType":"YulBlock","src":"1915:167:6","statements":[{"body":{"nodeType":"YulBlock","src":"1961:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1970:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1973:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1963:6:6"},"nodeType":"YulFunctionCall","src":"1963:12:6"},"nodeType":"YulExpressionStatement","src":"1963:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1936:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"1945:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1932:3:6"},"nodeType":"YulFunctionCall","src":"1932:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"1957:2:6","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1928:3:6"},"nodeType":"YulFunctionCall","src":"1928:32:6"},"nodeType":"YulIf","src":"1925:52:6"},{"nodeType":"YulAssignment","src":"1986:39:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2015:9:6"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1996:18:6"},"nodeType":"YulFunctionCall","src":"1996:29:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1986:6:6"}]},{"nodeType":"YulAssignment","src":"2034:42:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2061:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"2072:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2057:3:6"},"nodeType":"YulFunctionCall","src":"2057:18:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2044:12:6"},"nodeType":"YulFunctionCall","src":"2044:32:6"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2034:6:6"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1873:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1884:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1896:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1904:6:6","type":""}],"src":"1828:254:6"},{"body":{"nodeType":"YulBlock","src":"2157:110:6","statements":[{"body":{"nodeType":"YulBlock","src":"2203:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2212:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2215:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2205:6:6"},"nodeType":"YulFunctionCall","src":"2205:12:6"},"nodeType":"YulExpressionStatement","src":"2205:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2178:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"2187:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2174:3:6"},"nodeType":"YulFunctionCall","src":"2174:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"2199:2:6","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2170:3:6"},"nodeType":"YulFunctionCall","src":"2170:32:6"},"nodeType":"YulIf","src":"2167:52:6"},{"nodeType":"YulAssignment","src":"2228:33:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2251:9:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2238:12:6"},"nodeType":"YulFunctionCall","src":"2238:23:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2228:6:6"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2123:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2134:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2146:6:6","type":""}],"src":"2087:180:6"},{"body":{"nodeType":"YulBlock","src":"2446:168:6","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2463:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"2474:2:6","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2456:6:6"},"nodeType":"YulFunctionCall","src":"2456:21:6"},"nodeType":"YulExpressionStatement","src":"2456:21:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2497:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"2508:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2493:3:6"},"nodeType":"YulFunctionCall","src":"2493:18:6"},{"kind":"number","nodeType":"YulLiteral","src":"2513:2:6","type":"","value":"18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2486:6:6"},"nodeType":"YulFunctionCall","src":"2486:30:6"},"nodeType":"YulExpressionStatement","src":"2486:30:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2536:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"2547:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2532:3:6"},"nodeType":"YulFunctionCall","src":"2532:18:6"},{"hexValue":"4e6f2070656e64696e672072657761726473","kind":"string","nodeType":"YulLiteral","src":"2552:20:6","type":"","value":"No pending rewards"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2525:6:6"},"nodeType":"YulFunctionCall","src":"2525:48:6"},"nodeType":"YulExpressionStatement","src":"2525:48:6"},{"nodeType":"YulAssignment","src":"2582:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2594:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"2605:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2590:3:6"},"nodeType":"YulFunctionCall","src":"2590:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2582:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_8114dcf72780e60e19572e2c60a0c1f9869923f8566298d433960bbbf02ee9bd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2423:9:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2437:4:6","type":""}],"src":"2272:342:6"},{"body":{"nodeType":"YulBlock","src":"2810:14:6","statements":[{"nodeType":"YulAssignment","src":"2812:10:6","value":{"name":"pos","nodeType":"YulIdentifier","src":"2819:3:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2812:3:6"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"2794:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"2802:3:6","type":""}],"src":"2619:205:6"},{"body":{"nodeType":"YulBlock","src":"3003:165:6","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3020:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"3031:2:6","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3013:6:6"},"nodeType":"YulFunctionCall","src":"3013:21:6"},"nodeType":"YulExpressionStatement","src":"3013:21:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3054:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"3065:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3050:3:6"},"nodeType":"YulFunctionCall","src":"3050:18:6"},{"kind":"number","nodeType":"YulLiteral","src":"3070:2:6","type":"","value":"15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3043:6:6"},"nodeType":"YulFunctionCall","src":"3043:30:6"},"nodeType":"YulExpressionStatement","src":"3043:30:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3093:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"3104:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3089:3:6"},"nodeType":"YulFunctionCall","src":"3089:18:6"},{"hexValue":"5472616e73666572206661696c6564","kind":"string","nodeType":"YulLiteral","src":"3109:17:6","type":"","value":"Transfer failed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3082:6:6"},"nodeType":"YulFunctionCall","src":"3082:45:6"},"nodeType":"YulExpressionStatement","src":"3082:45:6"},{"nodeType":"YulAssignment","src":"3136:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3148:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"3159:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3144:3:6"},"nodeType":"YulFunctionCall","src":"3144:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3136:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2980:9:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2994:4:6","type":""}],"src":"2829:339:6"},{"body":{"nodeType":"YulBlock","src":"3347:169:6","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3364:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"3375:2:6","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3357:6:6"},"nodeType":"YulFunctionCall","src":"3357:21:6"},"nodeType":"YulExpressionStatement","src":"3357:21:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3398:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"3409:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3394:3:6"},"nodeType":"YulFunctionCall","src":"3394:18:6"},{"kind":"number","nodeType":"YulLiteral","src":"3414:2:6","type":"","value":"19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3387:6:6"},"nodeType":"YulFunctionCall","src":"3387:30:6"},"nodeType":"YulExpressionStatement","src":"3387:30:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3437:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"3448:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3433:3:6"},"nodeType":"YulFunctionCall","src":"3433:18:6"},{"hexValue":"4e6f207265776172647320746f20636c61696d","kind":"string","nodeType":"YulLiteral","src":"3453:21:6","type":"","value":"No rewards to claim"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3426:6:6"},"nodeType":"YulFunctionCall","src":"3426:49:6"},"nodeType":"YulExpressionStatement","src":"3426:49:6"},{"nodeType":"YulAssignment","src":"3484:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3496:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"3507:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3492:3:6"},"nodeType":"YulFunctionCall","src":"3492:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3484:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_584cf1690fd4124c524340f65c2f0897ce34c8cad61c485ada0c89030473339d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3324:9:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3338:4:6","type":""}],"src":"3173:343:6"},{"body":{"nodeType":"YulBlock","src":"3695:177:6","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3712:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"3723:2:6","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3705:6:6"},"nodeType":"YulFunctionCall","src":"3705:21:6"},"nodeType":"YulExpressionStatement","src":"3705:21:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3746:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"3757:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3742:3:6"},"nodeType":"YulFunctionCall","src":"3742:18:6"},{"kind":"number","nodeType":"YulLiteral","src":"3762:2:6","type":"","value":"27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3735:6:6"},"nodeType":"YulFunctionCall","src":"3735:30:6"},"nodeType":"YulExpressionStatement","src":"3735:30:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3785:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"3796:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3781:3:6"},"nodeType":"YulFunctionCall","src":"3781:18:6"},{"hexValue":"416c726561647920636c61696d656420616c6c2072657761726473","kind":"string","nodeType":"YulLiteral","src":"3801:29:6","type":"","value":"Already claimed all rewards"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3774:6:6"},"nodeType":"YulFunctionCall","src":"3774:57:6"},"nodeType":"YulExpressionStatement","src":"3774:57:6"},{"nodeType":"YulAssignment","src":"3840:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3852:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"3863:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3848:3:6"},"nodeType":"YulFunctionCall","src":"3848:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3840:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_b021c3242a8544174c11fe6ac27a3f4cad64f800971f0a5f8325e47522617856__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3672:9:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3686:4:6","type":""}],"src":"3521:351:6"},{"body":{"nodeType":"YulBlock","src":"3909:95:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3926:1:6","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3933:3:6","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3938:10:6","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3929:3:6"},"nodeType":"YulFunctionCall","src":"3929:20:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3919:6:6"},"nodeType":"YulFunctionCall","src":"3919:31:6"},"nodeType":"YulExpressionStatement","src":"3919:31:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3966:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3969:4:6","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3959:6:6"},"nodeType":"YulFunctionCall","src":"3959:15:6"},"nodeType":"YulExpressionStatement","src":"3959:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3990:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3993:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3983:6:6"},"nodeType":"YulFunctionCall","src":"3983:15:6"},"nodeType":"YulExpressionStatement","src":"3983:15:6"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"3877:127:6"},{"body":{"nodeType":"YulBlock","src":"4058:79:6","statements":[{"nodeType":"YulAssignment","src":"4068:17:6","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4080:1:6"},{"name":"y","nodeType":"YulIdentifier","src":"4083:1:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4076:3:6"},"nodeType":"YulFunctionCall","src":"4076:9:6"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"4068:4:6"}]},{"body":{"nodeType":"YulBlock","src":"4109:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"4111:16:6"},"nodeType":"YulFunctionCall","src":"4111:18:6"},"nodeType":"YulExpressionStatement","src":"4111:18:6"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"4100:4:6"},{"name":"x","nodeType":"YulIdentifier","src":"4106:1:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4097:2:6"},"nodeType":"YulFunctionCall","src":"4097:11:6"},"nodeType":"YulIf","src":"4094:37:6"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"4040:1:6","type":""},{"name":"y","nodeType":"YulTypedName","src":"4043:1:6","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"4049:4:6","type":""}],"src":"4009:128:6"},{"body":{"nodeType":"YulBlock","src":"4289:147:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4306:3:6"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4319:2:6","type":"","value":"96"},{"name":"value0","nodeType":"YulIdentifier","src":"4323:6:6"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4315:3:6"},"nodeType":"YulFunctionCall","src":"4315:15:6"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4336:26:6","type":"","value":"0xffffffffffffffffffffffff"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4332:3:6"},"nodeType":"YulFunctionCall","src":"4332:31:6"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4311:3:6"},"nodeType":"YulFunctionCall","src":"4311:53:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4299:6:6"},"nodeType":"YulFunctionCall","src":"4299:66:6"},"nodeType":"YulExpressionStatement","src":"4299:66:6"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4385:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"4390:2:6","type":"","value":"20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4381:3:6"},"nodeType":"YulFunctionCall","src":"4381:12:6"},{"name":"value1","nodeType":"YulIdentifier","src":"4395:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4374:6:6"},"nodeType":"YulFunctionCall","src":"4374:28:6"},"nodeType":"YulExpressionStatement","src":"4374:28:6"},{"nodeType":"YulAssignment","src":"4411:19:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4422:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"4427:2:6","type":"","value":"52"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4418:3:6"},"nodeType":"YulFunctionCall","src":"4418:12:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"4411:3:6"}]}]},"name":"abi_encode_tuple_packed_t_address_t_uint256__to_t_address_t_uint256__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"4257:3:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4262:6:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4270:6:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"4281:3:6","type":""}],"src":"4142:294:6"},{"body":{"nodeType":"YulBlock","src":"4615:170:6","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4632:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"4643:2:6","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4625:6:6"},"nodeType":"YulFunctionCall","src":"4625:21:6"},"nodeType":"YulExpressionStatement","src":"4625:21:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4666:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"4677:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4662:3:6"},"nodeType":"YulFunctionCall","src":"4662:18:6"},{"kind":"number","nodeType":"YulLiteral","src":"4682:2:6","type":"","value":"20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4655:6:6"},"nodeType":"YulFunctionCall","src":"4655:30:6"},"nodeType":"YulExpressionStatement","src":"4655:30:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4705:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"4716:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4701:3:6"},"nodeType":"YulFunctionCall","src":"4701:18:6"},{"hexValue":"496e76616c6964204d65726b6c652070726f6f66","kind":"string","nodeType":"YulLiteral","src":"4721:22:6","type":"","value":"Invalid Merkle proof"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4694:6:6"},"nodeType":"YulFunctionCall","src":"4694:50:6"},"nodeType":"YulExpressionStatement","src":"4694:50:6"},{"nodeType":"YulAssignment","src":"4753:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4765:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"4776:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4761:3:6"},"nodeType":"YulFunctionCall","src":"4761:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4753:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_cfff98aea1f4314a786c0426b520c2e5600fd9bdeb9d59d5d51311c13153d3c6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4592:9:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4606:4:6","type":""}],"src":"4441:344:6"},{"body":{"nodeType":"YulBlock","src":"4964:176:6","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4981:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"4992:2:6","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4974:6:6"},"nodeType":"YulFunctionCall","src":"4974:21:6"},"nodeType":"YulExpressionStatement","src":"4974:21:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5015:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"5026:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5011:3:6"},"nodeType":"YulFunctionCall","src":"5011:18:6"},{"kind":"number","nodeType":"YulLiteral","src":"5031:2:6","type":"","value":"26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5004:6:6"},"nodeType":"YulFunctionCall","src":"5004:30:6"},"nodeType":"YulExpressionStatement","src":"5004:30:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5054:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"5065:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5050:3:6"},"nodeType":"YulFunctionCall","src":"5050:18:6"},{"hexValue":"496e73756666696369656e742072657761726420616d6f756e74","kind":"string","nodeType":"YulLiteral","src":"5070:28:6","type":"","value":"Insufficient reward amount"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5043:6:6"},"nodeType":"YulFunctionCall","src":"5043:56:6"},"nodeType":"YulExpressionStatement","src":"5043:56:6"},{"nodeType":"YulAssignment","src":"5108:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5120:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"5131:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5116:3:6"},"nodeType":"YulFunctionCall","src":"5116:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5108:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_5a70a1957d0bc5746a316d65d79c814e231a04b6179c4c7790fdd52fe086f25c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4941:9:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4955:4:6","type":""}],"src":"4790:350:6"},{"body":{"nodeType":"YulBlock","src":"5319:173:6","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5336:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"5347:2:6","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5329:6:6"},"nodeType":"YulFunctionCall","src":"5329:21:6"},"nodeType":"YulExpressionStatement","src":"5329:21:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5370:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"5381:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5366:3:6"},"nodeType":"YulFunctionCall","src":"5366:18:6"},{"kind":"number","nodeType":"YulLiteral","src":"5386:2:6","type":"","value":"23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5359:6:6"},"nodeType":"YulFunctionCall","src":"5359:30:6"},"nodeType":"YulExpressionStatement","src":"5359:30:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5409:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"5420:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5405:3:6"},"nodeType":"YulFunctionCall","src":"5405:18:6"},{"hexValue":"496e76616c69642063726561746f722061646472657373","kind":"string","nodeType":"YulLiteral","src":"5425:25:6","type":"","value":"Invalid creator address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5398:6:6"},"nodeType":"YulFunctionCall","src":"5398:53:6"},"nodeType":"YulExpressionStatement","src":"5398:53:6"},{"nodeType":"YulAssignment","src":"5460:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5472:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"5483:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5468:3:6"},"nodeType":"YulFunctionCall","src":"5468:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5460:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_4259564b459b7f2329d6dfde1735bd513320c28bd67c2fe25b44aa76ee2a6087__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5296:9:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5310:4:6","type":""}],"src":"5145:347:6"},{"body":{"nodeType":"YulBlock","src":"5545:77:6","statements":[{"nodeType":"YulAssignment","src":"5555:16:6","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5566:1:6"},{"name":"y","nodeType":"YulIdentifier","src":"5569:1:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5562:3:6"},"nodeType":"YulFunctionCall","src":"5562:9:6"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"5555:3:6"}]},{"body":{"nodeType":"YulBlock","src":"5594:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"5596:16:6"},"nodeType":"YulFunctionCall","src":"5596:18:6"},"nodeType":"YulExpressionStatement","src":"5596:18:6"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5586:1:6"},{"name":"sum","nodeType":"YulIdentifier","src":"5589:3:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5583:2:6"},"nodeType":"YulFunctionCall","src":"5583:10:6"},"nodeType":"YulIf","src":"5580:36:6"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"5528:1:6","type":""},{"name":"y","nodeType":"YulTypedName","src":"5531:1:6","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"5537:3:6","type":""}],"src":"5497:125:6"},{"body":{"nodeType":"YulBlock","src":"5756:119:6","statements":[{"nodeType":"YulAssignment","src":"5766:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5778:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"5789:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5774:3:6"},"nodeType":"YulFunctionCall","src":"5774:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5766:4:6"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5808:9:6"},{"name":"value0","nodeType":"YulIdentifier","src":"5819:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5801:6:6"},"nodeType":"YulFunctionCall","src":"5801:25:6"},"nodeType":"YulExpressionStatement","src":"5801:25:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5846:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"5857:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5842:3:6"},"nodeType":"YulFunctionCall","src":"5842:18:6"},{"name":"value1","nodeType":"YulIdentifier","src":"5862:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5835:6:6"},"nodeType":"YulFunctionCall","src":"5835:34:6"},"nodeType":"YulExpressionStatement","src":"5835:34:6"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5717:9:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5728:6:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5736:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5747:4:6","type":""}],"src":"5627:248:6"},{"body":{"nodeType":"YulBlock","src":"6054:167:6","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6071:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"6082:2:6","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6064:6:6"},"nodeType":"YulFunctionCall","src":"6064:21:6"},"nodeType":"YulExpressionStatement","src":"6064:21:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6105:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"6116:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6101:3:6"},"nodeType":"YulFunctionCall","src":"6101:18:6"},{"kind":"number","nodeType":"YulLiteral","src":"6121:2:6","type":"","value":"17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6094:6:6"},"nodeType":"YulFunctionCall","src":"6094:30:6"},"nodeType":"YulExpressionStatement","src":"6094:30:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6144:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"6155:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6140:3:6"},"nodeType":"YulFunctionCall","src":"6140:18:6"},{"hexValue":"5769746864726177616c206661696c6564","kind":"string","nodeType":"YulLiteral","src":"6160:19:6","type":"","value":"Withdrawal failed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6133:6:6"},"nodeType":"YulFunctionCall","src":"6133:47:6"},"nodeType":"YulExpressionStatement","src":"6133:47:6"},{"nodeType":"YulAssignment","src":"6189:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6201:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"6212:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6197:3:6"},"nodeType":"YulFunctionCall","src":"6197:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6189:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_ec24209b271cd4d65181d9e8c6d9d718c94d28a7972011b1be42ea8d094a1a88__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6031:9:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6045:4:6","type":""}],"src":"5880:341:6"},{"body":{"nodeType":"YulBlock","src":"6258:95:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6275:1:6","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6282:3:6","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"6287:10:6","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6278:3:6"},"nodeType":"YulFunctionCall","src":"6278:20:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6268:6:6"},"nodeType":"YulFunctionCall","src":"6268:31:6"},"nodeType":"YulExpressionStatement","src":"6268:31:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6315:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6318:4:6","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6308:6:6"},"nodeType":"YulFunctionCall","src":"6308:15:6"},"nodeType":"YulExpressionStatement","src":"6308:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6339:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6342:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6332:6:6"},"nodeType":"YulFunctionCall","src":"6332:15:6"},"nodeType":"YulExpressionStatement","src":"6332:15:6"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"6226:127:6"},{"body":{"nodeType":"YulBlock","src":"6405:88:6","statements":[{"body":{"nodeType":"YulBlock","src":"6436:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"6438:16:6"},"nodeType":"YulFunctionCall","src":"6438:18:6"},"nodeType":"YulExpressionStatement","src":"6438:18:6"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6421:5:6"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6432:1:6","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"6428:3:6"},"nodeType":"YulFunctionCall","src":"6428:6:6"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6418:2:6"},"nodeType":"YulFunctionCall","src":"6418:17:6"},"nodeType":"YulIf","src":"6415:43:6"},{"nodeType":"YulAssignment","src":"6467:20:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6478:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"6485:1:6","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6474:3:6"},"nodeType":"YulFunctionCall","src":"6474:13:6"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"6467:3:6"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6387:5:6","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"6397:3:6","type":""}],"src":"6358:135:6"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_uint256t_array$_t_bytes32_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, shl(5, length)), 32), dataEnd) { revert(0, 0) }\n        value1 := add(_2, 32)\n        value2 := length\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_8114dcf72780e60e19572e2c60a0c1f9869923f8566298d433960bbbf02ee9bd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 18)\n        mstore(add(headStart, 64), \"No pending rewards\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"Transfer failed\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_584cf1690fd4124c524340f65c2f0897ce34c8cad61c485ada0c89030473339d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 19)\n        mstore(add(headStart, 64), \"No rewards to claim\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_b021c3242a8544174c11fe6ac27a3f4cad64f800971f0a5f8325e47522617856__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"Already claimed all rewards\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_packed_t_address_t_uint256__to_t_address_t_uint256__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, and(shl(96, value0), not(0xffffffffffffffffffffffff)))\n        mstore(add(pos, 20), value1)\n        end := add(pos, 52)\n    }\n    function abi_encode_tuple_t_stringliteral_cfff98aea1f4314a786c0426b520c2e5600fd9bdeb9d59d5d51311c13153d3c6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Invalid Merkle proof\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_5a70a1957d0bc5746a316d65d79c814e231a04b6179c4c7790fdd52fe086f25c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 26)\n        mstore(add(headStart, 64), \"Insufficient reward amount\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_4259564b459b7f2329d6dfde1735bd513320c28bd67c2fe25b44aa76ee2a6087__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Invalid creator address\")\n        tail := add(headStart, 96)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_stringliteral_ec24209b271cd4d65181d9e8c6d9d718c94d28a7972011b1be42ea8d094a1a88__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"Withdrawal failed\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n}","id":6,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"6080604052600436106100ec5760003560e01c8063abd40e1e1161008a578063d645a3de11610059578063d645a3de1461026e578063db2e21bc1461028e578063f2fde38b146102a3578063f6ed2017146102c357600080fd5b8063abd40e1e146101d8578063b05c438f146101f8578063b9e35db01461020b578063bd8343451461024157600080fd5b8063715018a6116100c6578063715018a6146101705780638da5cb5b1461018557806392bd7b2c146101ad57806395646fd9146101c257600080fd5b80632eb4a7ab146100f857806331d7a262146101215780634783f0ef1461014e57600080fd5b366100f357005b600080fd5b34801561010457600080fd5b5061010e60035481565b6040519081526020015b60405180910390f35b34801561012d57600080fd5b5061010e61013c366004610a94565b60056020526000908152604090205481565b34801561015a57600080fd5b5061016e610169366004610aaf565b6102f9565b005b34801561017c57600080fd5b5061016e61033d565b34801561019157600080fd5b506001546040516001600160a01b039091168152602001610118565b3480156101b957600080fd5b5061016e610351565b3480156101ce57600080fd5b5061010e60025481565b3480156101e457600080fd5b5061016e6101f3366004610ac8565b61048a565b61016e610206366004610b47565b6106eb565b34801561021757600080fd5b5061010e610226366004610a94565b6001600160a01b031660009081526004602052604090205490565b34801561024d57600080fd5b5061010e61025c366004610a94565b60046020526000908152604090205481565b34801561027a57600080fd5b5061016e610289366004610aaf565b610808565b34801561029a57600080fd5b5061016e610845565b3480156102af57600080fd5b5061016e6102be366004610a94565b6108fa565b3480156102cf57600080fd5b5061010e6102de366004610a94565b6001600160a01b031660009081526005602052604090205490565b610301610938565b60038190556040518181527f90004c04698bc3322499a575ed3752dd4abf33e0a7294c06a787a0fe01bea941906020015b60405180910390a150565b610345610938565b61034f6000610965565b565b6103596109b7565b33600090815260056020526040902054806103b05760405162461bcd60e51b81526020600482015260126024820152714e6f2070656e64696e67207265776172647360701b60448201526064015b60405180910390fd5b336000818152600560205260408082208290555190919083908381818185875af1925050503d8060008114610401576040519150601f19603f3d011682016040523d82523d6000602084013e610406565b606091505b50509050806104495760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b60448201526064016103a7565b60405182815233907ffc30cddea38e2bf4d6ea7d3f9ed3b6ad7f176419f4963bd81318067a4aee73fe9060200160405180910390a2505061034f6001600055565b6104926109b7565b600083116104d85760405162461bcd60e51b81526020600482015260136024820152724e6f207265776172647320746f20636c61696d60681b60448201526064016103a7565b336000908152600460205260409020548084116105375760405162461bcd60e51b815260206004820152601b60248201527f416c726561647920636c61696d656420616c6c2072657761726473000000000060448201526064016103a7565b60006105438286610b87565b6040516bffffffffffffffffffffffff193360601b166020820152603481018790529091506000906054016040516020818303038152906040528051906020012090506105c78585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060035491508490506109e1565b61060a5760405162461bcd60e51b815260206004820152601460248201527324b73b30b634b21026b2b935b63290383937b7b360611b60448201526064016103a7565b336000818152600460205260408082208990555190919084908381818185875af1925050503d806000811461065b576040519150601f19603f3d011682016040523d82523d6000602084013e610660565b606091505b50509050806106a35760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b60448201526064016103a7565b60405183815233907ffc30cddea38e2bf4d6ea7d3f9ed3b6ad7f176419f4963bd81318067a4aee73fe9060200160405180910390a2505050506106e66001600055565b505050565b60025434101561073d5760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e742072657761726420616d6f756e7400000000000060448201526064016103a7565b6001600160a01b0382166107935760405162461bcd60e51b815260206004820152601760248201527f496e76616c69642063726561746f72206164647265737300000000000000000060448201526064016103a7565b6001600160a01b038216600090815260056020526040812080543492906107bb908490610b9a565b909155505060408051348152602081018390526001600160a01b038416917feafb9fc200c0649f201654890c7c9185964f2f4ff66727753763452c51bd9286910160405180910390a25050565b610810610938565b60028190556040518181527fe7fca20a845ccc07535ff95293a502f93dbf8a1106113e56257e692a0904511190602001610332565b61084d610938565b4760006108626001546001600160a01b031690565b6001600160a01b03168260405160006040518083038185875af1925050503d80600081146108ac576040519150601f19603f3d011682016040523d82523d6000602084013e6108b1565b606091505b50509050806108f65760405162461bcd60e51b815260206004820152601160248201527015da5d1a191c985dd85b0819985a5b1959607a1b60448201526064016103a7565b5050565b610902610938565b6001600160a01b03811661092c57604051631e4fbdf760e01b8152600060048201526024016103a7565b61093581610965565b50565b6001546001600160a01b0316331461034f5760405163118cdaa760e01b81523360048201526024016103a7565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6002600054036109da57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6000826109ee85846109f7565b14949350505050565b600081815b8451811015610a3c57610a2882868381518110610a1b57610a1b610bad565b6020026020010151610a46565b915080610a3481610bc3565b9150506109fc565b5090505b92915050565b6000818310610a62576000828152602084905260409020610a71565b60008381526020839052604090205b9392505050565b80356001600160a01b0381168114610a8f57600080fd5b919050565b600060208284031215610aa657600080fd5b610a7182610a78565b600060208284031215610ac157600080fd5b5035919050565b600080600060408486031215610add57600080fd5b83359250602084013567ffffffffffffffff80821115610afc57600080fd5b818601915086601f830112610b1057600080fd5b813581811115610b1f57600080fd5b8760208260051b8501011115610b3457600080fd5b6020830194508093505050509250925092565b60008060408385031215610b5a57600080fd5b610b6383610a78565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610a4057610a40610b71565b80820180821115610a4057610a40610b71565b634e487b7160e01b600052603260045260246000fd5b600060018201610bd557610bd5610b71565b506001019056fea2646970667358221220898869460c0ec57938b5fd32b6f9a5ad34070e19d002848e7c9f46e3c94bd72f64736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xEC JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xABD40E1E GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xD645A3DE GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xD645A3DE EQ PUSH2 0x26E JUMPI DUP1 PUSH4 0xDB2E21BC EQ PUSH2 0x28E JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2A3 JUMPI DUP1 PUSH4 0xF6ED2017 EQ PUSH2 0x2C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xABD40E1E EQ PUSH2 0x1D8 JUMPI DUP1 PUSH4 0xB05C438F EQ PUSH2 0x1F8 JUMPI DUP1 PUSH4 0xB9E35DB0 EQ PUSH2 0x20B JUMPI DUP1 PUSH4 0xBD834345 EQ PUSH2 0x241 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 GT PUSH2 0xC6 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x170 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x185 JUMPI DUP1 PUSH4 0x92BD7B2C EQ PUSH2 0x1AD JUMPI DUP1 PUSH4 0x95646FD9 EQ PUSH2 0x1C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2EB4A7AB EQ PUSH2 0xF8 JUMPI DUP1 PUSH4 0x31D7A262 EQ PUSH2 0x121 JUMPI DUP1 PUSH4 0x4783F0EF EQ PUSH2 0x14E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0xF3 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x104 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10E PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10E PUSH2 0x13C CALLDATASIZE PUSH1 0x4 PUSH2 0xA94 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x15A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16E PUSH2 0x169 CALLDATASIZE PUSH1 0x4 PUSH2 0xAAF JUMP JUMPDEST PUSH2 0x2F9 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x17C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16E PUSH2 0x33D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x191 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x118 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16E PUSH2 0x351 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10E PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16E PUSH2 0x1F3 CALLDATASIZE PUSH1 0x4 PUSH2 0xAC8 JUMP JUMPDEST PUSH2 0x48A JUMP JUMPDEST PUSH2 0x16E PUSH2 0x206 CALLDATASIZE PUSH1 0x4 PUSH2 0xB47 JUMP JUMPDEST PUSH2 0x6EB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x217 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10E PUSH2 0x226 CALLDATASIZE PUSH1 0x4 PUSH2 0xA94 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10E PUSH2 0x25C CALLDATASIZE PUSH1 0x4 PUSH2 0xA94 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x27A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16E PUSH2 0x289 CALLDATASIZE PUSH1 0x4 PUSH2 0xAAF JUMP JUMPDEST PUSH2 0x808 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x29A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16E PUSH2 0x845 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16E PUSH2 0x2BE CALLDATASIZE PUSH1 0x4 PUSH2 0xA94 JUMP JUMPDEST PUSH2 0x8FA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10E PUSH2 0x2DE CALLDATASIZE PUSH1 0x4 PUSH2 0xA94 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x301 PUSH2 0x938 JUMP JUMPDEST PUSH1 0x3 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0x90004C04698BC3322499A575ED3752DD4ABF33E0A7294C06A787A0FE01BEA941 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x345 PUSH2 0x938 JUMP JUMPDEST PUSH2 0x34F PUSH1 0x0 PUSH2 0x965 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x359 PUSH2 0x9B7 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP1 PUSH2 0x3B0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x4E6F2070656E64696E672072657761726473 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP3 SWAP1 SSTORE MLOAD SWAP1 SWAP2 SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x401 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x406 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x449 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x151C985B9CD9995C8819985A5B1959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE CALLER SWAP1 PUSH32 0xFC30CDDEA38E2BF4D6EA7D3F9ED3B6AD7F176419F4963BD81318067A4AEE73FE SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP PUSH2 0x34F PUSH1 0x1 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH2 0x492 PUSH2 0x9B7 JUMP JUMPDEST PUSH1 0x0 DUP4 GT PUSH2 0x4D8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x4E6F207265776172647320746F20636C61696D PUSH1 0x68 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3A7 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP1 DUP5 GT PUSH2 0x537 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416C726561647920636C61696D656420616C6C20726577617264730000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3A7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x543 DUP3 DUP7 PUSH2 0xB87 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT CALLER PUSH1 0x60 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP8 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x54 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x5C7 DUP6 DUP6 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP PUSH1 0x3 SLOAD SWAP2 POP DUP5 SWAP1 POP PUSH2 0x9E1 JUMP JUMPDEST PUSH2 0x60A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x24B73B30B634B21026B2B935B63290383937B7B3 PUSH1 0x61 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3A7 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP10 SWAP1 SSTORE MLOAD SWAP1 SWAP2 SWAP1 DUP5 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x65B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x660 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x6A3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x151C985B9CD9995C8819985A5B1959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 DUP2 MSTORE CALLER SWAP1 PUSH32 0xFC30CDDEA38E2BF4D6EA7D3F9ED3B6AD7F176419F4963BD81318067A4AEE73FE SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP PUSH2 0x6E6 PUSH1 0x1 PUSH1 0x0 SSTORE JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD CALLVALUE LT ISZERO PUSH2 0x73D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E742072657761726420616D6F756E74000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3A7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x793 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C69642063726561746F722061646472657373000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3A7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD CALLVALUE SWAP3 SWAP1 PUSH2 0x7BB SWAP1 DUP5 SWAP1 PUSH2 0xB9A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD CALLVALUE DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP2 PUSH32 0xEAFB9FC200C0649F201654890C7C9185964F2F4FF66727753763452C51BD9286 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH2 0x810 PUSH2 0x938 JUMP JUMPDEST PUSH1 0x2 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0xE7FCA20A845CCC07535FF95293A502F93DBF8A1106113E56257E692A09045111 SWAP1 PUSH1 0x20 ADD PUSH2 0x332 JUMP JUMPDEST PUSH2 0x84D PUSH2 0x938 JUMP JUMPDEST SELFBALANCE PUSH1 0x0 PUSH2 0x862 PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x8AC JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x8B1 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x8F6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x15DA5D1A191C985DD85B0819985A5B1959 PUSH1 0x7A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3A7 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x902 PUSH2 0x938 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x92C JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3A7 JUMP JUMPDEST PUSH2 0x935 DUP2 PUSH2 0x965 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x34F JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3A7 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD SUB PUSH2 0x9DA JUMPI PUSH1 0x40 MLOAD PUSH4 0x3EE5AEB5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x9EE DUP6 DUP5 PUSH2 0x9F7 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xA3C JUMPI PUSH2 0xA28 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xA1B JUMPI PUSH2 0xA1B PUSH2 0xBAD JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xA46 JUMP JUMPDEST SWAP2 POP DUP1 PUSH2 0xA34 DUP2 PUSH2 0xBC3 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x9FC JUMP JUMPDEST POP SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xA62 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xA71 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xA8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA71 DUP3 PUSH2 0xA78 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xADD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xAFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xB10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xB1F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xB34 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP5 POP DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB63 DUP4 PUSH2 0xA78 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0xA40 JUMPI PUSH2 0xA40 PUSH2 0xB71 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0xA40 JUMPI PUSH2 0xA40 PUSH2 0xB71 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0xBD5 JUMPI PUSH2 0xBD5 PUSH2 0xB71 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP10 DUP9 PUSH10 0x460C0EC57938B5FD32B6 0xF9 0xA5 0xAD CALLVALUE SMOD 0xE NOT 0xD0 MUL DUP5 DUP15 PUSH29 0x9F46E3C94BD72F64736F6C634300081400330000000000000000000000 ","sourceMap":"355:4239:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;538:25;;;;;;;;;;;;;;;;;;;160::6;;;148:2;133:18;538:25:5;;;;;;;;743:49;;;;;;;;;;-1:-1:-1;743:49:5;;;;;:::i;:::-;;;;;;;;;;;;;;3435:140;;;;;;;;;;-1:-1:-1;3435:140:5;;;;;:::i;:::-;;:::i;:::-;;2293:101:0;;;;;;;;;;;;;:::i;1638:85::-;;;;;;;;;;-1:-1:-1;1710:6:0;;1638:85;;-1:-1:-1;;;;;1710:6:0;;;1078:51:6;;1066:2;1051:18;1638:85:0;932:203:6;2939:388:5;;;;;;;;;;;;;:::i;449:42::-;;;;;;;;;;;;;;;;1829:1008;;;;;;;;;;-1:-1:-1;1829:1008:5;;;;;:::i;:::-;;:::i;1272:352::-;;;;;;:::i;:::-;;:::i;4116:117::-;;;;;;;;;;-1:-1:-1;4116:117:5;;;;;:::i;:::-;-1:-1:-1;;;;;4206:20:5;4180:7;4206:20;;;:14;:20;;;;;;;4116:117;630:49;;;;;;;;;;-1:-1:-1;630:49:5;;;;;:::i;:::-;;;;;;;;;;;;;;3698:155;;;;;;;;;;-1:-1:-1;3698:155:5;;;;;:::i;:::-;;:::i;4303:212::-;;;;;;;;;;;;;:::i;2543:215:0:-;;;;;;;;;;-1:-1:-1;2543:215:0;;;;;:::i;:::-;;:::i;3926:117:5:-;;;;;;;;;;-1:-1:-1;3926:117:5;;;;;:::i;:::-;-1:-1:-1;;;;;4016:20:5;3990:7;4016:20;;;:14;:20;;;;;;;3926:117;3435:140;1531:13:0;:11;:13::i;:::-;3507:10:5::1;:20:::0;;;3542:26:::1;::::0;160:25:6;;;3542:26:5::1;::::0;148:2:6;133:18;3542:26:5::1;;;;;;;;3435:140:::0;:::o;2293:101:0:-;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;:::-;2293:101::o:0;2939:388:5:-;2500:21:2;:19;:21::i;:::-;3034:10:5::1;3002:14;3019:26:::0;;;:14:::1;:26;::::0;;;;;3063:10;3055:41:::1;;;::::0;-1:-1:-1;;;3055:41:5;;2474:2:6;3055:41:5::1;::::0;::::1;2456:21:6::0;2513:2;2493:18;;;2486:30;-1:-1:-1;;;2532:18:6;;;2525:48;2590:18;;3055:41:5::1;;;;;;;;;3130:10;3144:1;3115:26:::0;;;:14:::1;:26;::::0;;;;;:30;;;3183:34;3144:1;;3130:10;3206:6;;3144:1;3183:34;3144:1;3183:34;3206:6;3130:10;3183:34:::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3164:53;;;3235:7;3227:35;;;::::0;-1:-1:-1;;;3227:35:5;;3031:2:6;3227:35:5::1;::::0;::::1;3013:21:6::0;3070:2;3050:18;;;3043:30;-1:-1:-1;;;3089:18:6;;;3082:45;3144:18;;3227:35:5::1;2829:339:6::0;3227:35:5::1;3286:34;::::0;160:25:6;;;3301:10:5::1;::::0;3286:34:::1;::::0;148:2:6;133:18;3286:34:5::1;;;;;;;2992:335;;2542:20:2::0;1857:1;3068:7;:21;2888:208;1829:1008:5;2500:21:2;:19;:21::i;:::-;1980:1:5::1;1966:11;:15;1958:47;;;::::0;-1:-1:-1;;;1958:47:5;;3375:2:6;1958:47:5::1;::::0;::::1;3357:21:6::0;3414:2;3394:18;;;3387:30;-1:-1:-1;;;3433:18:6;;;3426:49;3492:18;;1958:47:5::1;3173:343:6::0;1958:47:5::1;2127:10;2087:22;2112:26:::0;;;:14:::1;:26;::::0;;;;;2156:28;;::::1;2148:68;;;::::0;-1:-1:-1;;;2148:68:5;;3723:2:6;2148:68:5::1;::::0;::::1;3705:21:6::0;3762:2;3742:18;;;3735:30;3801:29;3781:18;;;3774:57;3848:18;;2148:68:5::1;3521:351:6::0;2148:68:5::1;2226:21;2250:28;2264:14:::0;2250:11;:28:::1;:::i;:::-;2353:41;::::0;-1:-1:-1;;2370:10:5::1;4319:2:6::0;4315:15;4311:53;2353:41:5::1;::::0;::::1;4299:66:6::0;4381:12;;;4374:28;;;2226:52:5;;-1:-1:-1;2328:12:5::1;::::0;4418::6;;2353:41:5::1;;;;;;;;;;;;2343:52;;;;;;2328:67;;2426:49;2445:11;;2426:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;::::0;;;;-1:-1:-1;;2458:10:5::1;::::0;;-1:-1:-1;2470:4:5;;-1:-1:-1;2426:18:5::1;:49::i;:::-;2405:116;;;::::0;-1:-1:-1;;;2405:116:5;;4643:2:6;2405:116:5::1;::::0;::::1;4625:21:6::0;4682:2;4662:18;;;4655:30;-1:-1:-1;;;4701:18:6;;;4694:50;4761:18;;2405:116:5::1;4441:344:6::0;2405:116:5::1;2588:10;2573:26;::::0;;;:14:::1;:26;::::0;;;;;:40;;;2679:41;2573:26;;2588:10;2702:13;;2573:26;2679:41;2573:26;2679:41;2702:13;2588:10;2679:41:::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2660:60;;;2738:7;2730:35;;;::::0;-1:-1:-1;;;2730:35:5;;3031:2:6;2730:35:5::1;::::0;::::1;3013:21:6::0;3070:2;3050:18;;;3043:30;-1:-1:-1;;;3089:18:6;;;3082:45;3144:18;;2730:35:5::1;2829:339:6::0;2730:35:5::1;2789:41;::::0;160:25:6;;;2804:10:5::1;::::0;2789:41:::1;::::0;148:2:6;133:18;2789:41:5::1;;;;;;;1948:889;;;;2542:20:2::0;1857:1;3068:7;:21;2888:208;2542:20;1829:1008:5;;;:::o;1272:352::-;1380:13;;1367:9;:26;;1359:65;;;;-1:-1:-1;;;1359:65:5;;4992:2:6;1359:65:5;;;4974:21:6;5031:2;5011:18;;;5004:30;5070:28;5050:18;;;5043:56;5116:18;;1359:65:5;4790:350:6;1359:65:5;-1:-1:-1;;;;;1442:21:5;;1434:57;;;;-1:-1:-1;;;1434:57:5;;5347:2:6;1434:57:5;;;5329:21:6;5386:2;5366:18;;;5359:30;5425:25;5405:18;;;5398:53;5468:18;;1434:57:5;5145:347:6;1434:57:5;-1:-1:-1;;;;;1510:23:5;;;;;;:14;:23;;;;;:36;;1537:9;;1510:23;:36;;1537:9;;1510:36;:::i;:::-;;;;-1:-1:-1;;1570:47:5;;;1599:9;5801:25:6;;5857:2;5842:18;;5835:34;;;-1:-1:-1;;;;;1570:47:5;;;;;5774:18:6;1570:47:5;;;;;;;1272:352;;:::o;3698:155::-;1531:13:0;:11;:13::i;:::-;3775::5::1;:25:::0;;;3815:31:::1;::::0;160:25:6;;;3815:31:5::1;::::0;148:2:6;133:18;3815:31:5::1;14:177:6::0;4303:212:5;1531:13:0;:11;:13::i;:::-;4379:21:5::1;4361:15;4429:7;1710:6:0::0;;-1:-1:-1;;;;;1710:6:0;;1638:85;4429:7:5::1;-1:-1:-1::0;;;;;4429:12:5::1;4449:7;4429:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4410:51;;;4479:7;4471:37;;;::::0;-1:-1:-1;;;4471:37:5;;6082:2:6;4471:37:5::1;::::0;::::1;6064:21:6::0;6121:2;6101:18;;;6094:30;-1:-1:-1;;;6140:18:6;;;6133:47;6197:18;;4471:37:5::1;5880:341:6::0;4471:37:5::1;4351:164;;4303:212::o:0;2543:215:0:-;1531:13;:11;:13::i;:::-;-1:-1:-1;;;;;2627:22:0;::::1;2623:91;;2672:31;::::0;-1:-1:-1;;;2672:31:0;;2700:1:::1;2672:31;::::0;::::1;1078:51:6::0;1051:18;;2672:31:0::1;932:203:6::0;2623:91:0::1;2723:28;2742:8;2723:18;:28::i;:::-;2543:215:::0;:::o;1796:162::-;1710:6;;-1:-1:-1;;;;;1710:6:0;735:10:1;1855:23:0;1851:101;;1901:40;;-1:-1:-1;;;1901:40:0;;735:10:1;1901:40:0;;;1078:51:6;1051:18;;1901:40:0;932:203:6;2912:187:0;3004:6;;;-1:-1:-1;;;;;3020:17:0;;;-1:-1:-1;;;;;;3020:17:0;;;;;;;3052:40;;3004:6;;;3020:17;3004:6;;3052:40;;2985:16;;3052:40;2975:124;2912:187;:::o;2575:307:2:-;1899:1;2702:7;;:18;2698:86;;2743:30;;-1:-1:-1;;;2743:30:2;;;;;;;;;;;2698:86;1899:1;2858:7;:17;2575:307::o;1902:154:4:-;1993:4;2045;2016:25;2029:5;2036:4;2016:12;:25::i;:::-;:33;;1902:154;-1:-1:-1;;;;1902:154:4:o;2457:308::-;2540:7;2582:4;2540:7;2596:134;2620:5;:12;2616:1;:16;2596:134;;;2668:51;2696:12;2710:5;2716:1;2710:8;;;;;;;;:::i;:::-;;;;;;;2668:27;:51::i;:::-;2653:66;-1:-1:-1;2634:3:4;;;;:::i;:::-;;;;2596:134;;;-1:-1:-1;2746:12:4;-1:-1:-1;2457:308:4;;;;;:::o;504:167:3:-;579:7;609:1;605;:5;:59;;864:13;928:15;;;963:4;956:15;;;1009:4;993:21;;605:59;;;864:13;928:15;;;963:4;956:15;;;1009:4;993:21;;613:24;598:66;504:167;-1:-1:-1;;;504:167:3:o;196:173:6:-;264:20;;-1:-1:-1;;;;;313:31:6;;303:42;;293:70;;359:1;356;349:12;293:70;196:173;;;:::o;374:186::-;433:6;486:2;474:9;465:7;461:23;457:32;454:52;;;502:1;499;492:12;454:52;525:29;544:9;525:29;:::i;747:180::-;806:6;859:2;847:9;838:7;834:23;830:32;827:52;;;875:1;872;865:12;827:52;-1:-1:-1;898:23:6;;747:180;-1:-1:-1;747:180:6:o;1140:683::-;1235:6;1243;1251;1304:2;1292:9;1283:7;1279:23;1275:32;1272:52;;;1320:1;1317;1310:12;1272:52;1356:9;1343:23;1333:33;;1417:2;1406:9;1402:18;1389:32;1440:18;1481:2;1473:6;1470:14;1467:34;;;1497:1;1494;1487:12;1467:34;1535:6;1524:9;1520:22;1510:32;;1580:7;1573:4;1569:2;1565:13;1561:27;1551:55;;1602:1;1599;1592:12;1551:55;1642:2;1629:16;1668:2;1660:6;1657:14;1654:34;;;1684:1;1681;1674:12;1654:34;1737:7;1732:2;1722:6;1719:1;1715:14;1711:2;1707:23;1703:32;1700:45;1697:65;;;1758:1;1755;1748:12;1697:65;1789:2;1785;1781:11;1771:21;;1811:6;1801:16;;;;;1140:683;;;;;:::o;1828:254::-;1896:6;1904;1957:2;1945:9;1936:7;1932:23;1928:32;1925:52;;;1973:1;1970;1963:12;1925:52;1996:29;2015:9;1996:29;:::i;:::-;1986:39;2072:2;2057:18;;;;2044:32;;-1:-1:-1;;;1828:254:6:o;3877:127::-;3938:10;3933:3;3929:20;3926:1;3919:31;3969:4;3966:1;3959:15;3993:4;3990:1;3983:15;4009:128;4076:9;;;4097:11;;;4094:37;;;4111:18;;:::i;5497:125::-;5562:9;;;5583:10;;;5580:36;;;5596:18;;:::i;6226:127::-;6287:10;6282:3;6278:20;6275:1;6268:31;6318:4;6315:1;6308:15;6342:4;6339:1;6332:15;6358:135;6397:3;6418:17;;;6415:43;;6438:18;;:::i;:::-;-1:-1:-1;6485:1:6;6474:13;;6358:135::o"},"methodIdentifiers":{"claimPendingRewards()":"92bd7b2c","claimRewards(uint256,bytes32[])":"abd40e1e","claimedRewards(address)":"bd834345","depositLikeReward(address,uint256)":"b05c438f","emergencyWithdraw()":"db2e21bc","getClaimedRewards(address)":"b9e35db0","getPendingRewards(address)":"f6ed2017","merkleRoot()":"2eb4a7ab","owner()":"8da5cb5b","pendingRewards(address)":"31d7a262","renounceOwnership()":"715018a6","rewardPerLike()":"95646fd9","transferOwnership(address)":"f2fde38b","updateMerkleRoot(bytes32)":"4783f0ef","updateRewardPerLike(uint256)":"d645a3de"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"memeId\",\"type\":\"uint256\"}],\"name\":\"LikeRewardDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"}],\"name\":\"MerkleRootUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"RewardPerLikeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimPendingRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"memeId\",\"type\":\"uint256\"}],\"name\":\"depositLikeReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getClaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerLike\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"}],\"name\":\"updateMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateRewardPerLike\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Manages ETH rewards for meme creators with batch claiming via Merkle proofs\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"claimPendingRewards()\":{\"details\":\"Simple claim without Merkle proof (uses pendingRewards mapping)\"},\"claimRewards(uint256,bytes32[])\":{\"details\":\"Claim rewards using Merkle proof (batch claiming)\",\"params\":{\"merkleProof\":\"Merkle proof for verification\",\"totalAmount\":\"Total amount claimable by the user\"}},\"depositLikeReward(address,uint256)\":{\"details\":\"Deposit reward for a like\",\"params\":{\"creator\":\"Address of the meme creator\",\"memeId\":\"ID of the meme being liked\"}},\"emergencyWithdraw()\":{\"details\":\"Emergency withdraw (owner only)\"},\"getClaimedRewards(address)\":{\"details\":\"Get claimed rewards for an address\"},\"getPendingRewards(address)\":{\"details\":\"Get pending rewards for an address\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateMerkleRoot(bytes32)\":{\"details\":\"Update Merkle root (admin only)\",\"params\":{\"newRoot\":\"New Merkle root\"}},\"updateRewardPerLike(uint256)\":{\"details\":\"Update reward per like (admin only)\",\"params\":{\"newAmount\":\"New reward amount in wei\"}}},\"title\":\"MemeRewards\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MemeRewards.sol\":\"MemeRewards\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3cf0c69ab827e3251db9ee6a50647d62c90ba580a4d7bbff21f2bea39e7b2f4a\",\"dweb:/ipfs/QmZiKwtKU1SBX4RGfQtY7PZfiapbbu6SZ9vizGQD9UHjRA\"]},\"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":{\"keccak256\":\"0x8cbd338f083224b4b6f0ff42cbda641a0a6c31ffcdca197452b97fe4d0918269\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f517dec5ba0c6491395acbf7f1d621f4e89e8f218bf5303c867b1c5ad70c6b11\",\"dweb:/ipfs/QmWmXHRLEw8W6ckth7NyYTU88YfvuS7xSsfae5ksL8qNUe\"]},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0x36a0c409c437a753cac9b92b75f93b0fbe92803bf2c8ff1517e54b247f166134\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0f91ba472de411aa557cdbf6560c40750d87bd11c9060bc04d2ba7119af9d5a6\",\"dweb:/ipfs/QmQjtYo2i7dDvzCEzZ67bDoNSG4RrwMoxPWuqFmX5Xzpuw\"]},\"contracts/MemeRewards.sol\":{\"keccak256\":\"0x1b779953fd1af4206a3c908e897a02c43b0e6286e905d3609190473d6bc1387c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://35bb8ce7fbb879bcabdf162d8d23a25b226c8977cbd2f33570e7cea523e4098c\",\"dweb:/ipfs/QmP2EpbD9qn9NZMFfbqcqWkR9m7miJZb3mveHTCtpgtYPv\"]}},\"version\":1}"}}}}}